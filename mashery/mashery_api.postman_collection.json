{
	"info": {
		"_postman_id": "f1d78962-8cfe-455c-8ad5-b14d347ad5e0",
		"name": "Mashery API",
		"description": "\n- [What is this?](#what-is-this)\n- [Why should I use it?](#why-should-i-use-it)\n- [How do I install and configure?](#how-do-i-install-and-configure)\n- [How do I execute the collection of requests?](#how-do-i-execute-the-collection-of-requests)\n- [How do I execute requests individually?](#how-do-i-execute-requests-individually)\n- [Reference](#reference)\n    - [Getting an access token](#getting-an-access-token)\n    - [Command line](#command-line)\n    - [API Specification](#api-specification)\n    - [JSON to CSV](#json-to-csv)\n    - [Node.js implementation for v3 API](#node-js-implementation-for-v3-api)\n\n**Confidentiality**\n\n© 2020 TIBCO Software Inc. All rights reserved.\n\nThe following is information of TIBCO Software Inc. Use, duplication, transmission, or republication for any purpose without the prior written consent of TIBCO is expressly prohibited.\n\n**Disclaimer**\n\nThis document (including, without limitation, any product roadmap or statement of direction data) illustrates the planned testing, release and availability dates for TIBCO products and services. This document is provided for informational purposes only and its contents are subject to change without notice. TIBCO makes no warranties, express or implied, in or relating to this document or any information in it, including, without limitation, that this document, or any information in it, is error-free or meets any conditions of merchantability or fitness for a particular purpose. This document may not be reproduced or transmitted in any form or by any means without our prior written permission.\nThe material provided is for informational purposes only, and should not be relied on in making a purchasing decision. The information is not a commitment, promise or legal obligation to deliver any material, code, or functionality. The development, release, and timing of any features or functionality described for our products remain at our sole discretion.\nIn this document TIBCO or its representatives may make forward-looking statements regarding future events, TIBCO’s future results or our future financial performance. These statements are based on management’s current expectations. Although we believe that the expectations reflected in the forward-looking statements contained in this document are reasonable, these expectations or any of the forward-looking statements could prove to be incorrect and actual results or financial performance could differ materially from those stated herein. TIBCO does not undertake to update any forward-looking statement that may be made from time to time or on its behalf.\n\n# What is this?\n\nThis collection runs all GET requests available in the [v3 Mashery API](https://developer.mashery.com/docs/read/mashery_api/30) to extract all data (except portal and EAVs) for an area.\n\nAdditionally, it provides most of the common requests for creating, updating and deleting resources. \n\nAlso, there are example [v2 Mashery API](https://developer.mashery.com/docs/read/mashery_api/20) requests.\n\nFor OAuth examples, see the companion [Mashery API OAuth collection](https://documenter.getpostman.com/view/4885521/RzfnknBN).\n\nFor reporting, see the companion [Mashery Activity Report](https://documenter.getpostman.com/view/4885521/RzZFBw9W).\n\n# Why should I use it?\n\nIt provides a convenient, portable way of using the Mashery API without doing any coding or reading much documentation. It's easy to make ad hoc requests and updates using the pre-built requests.\n\n# How do I install and configure?\n\n* You need a Mashery area, an id (username/password) and a v3 API key/secret. If you don't have these, then sign-up at https://developer.mashery.com/.\n* Download and install Postman from from https://www.getpostman.com/apps.\n* Open Postman, click on the 'Manage Environments' gear icon in the top right, select the 'Globals' button and add variables with values set to your credentials:\n  * 'v3 API domain' set to 'api.mashery.com'\n  * 'v3 API key'\n  * 'v3 API secret'\n  * 'v3 API username'\n  * 'v3 API password'\n  * 'area id' (the UUID)\n  * 'site id' (the id, only required for v2 API)\n* In a browser, go to https://documenter.getpostman.com/view/4885521/RzfcKqGJ and select 'Run in Postman' (button top right). This imports into Postman the Mashery API request collection.\n\nThat's it.\n\nNote: if you are using Mashery Local 5.1 or greater in untethered mode, then please consult the installation and configuration manual.\n\n# How do I execute the collection of requests?\n\nThe v3 collection can be run automatically to execute all GET requests for your Mashery area. This is good if you want to compile a snapshot of all your configuration data.\n\nTo do this:\n* Hover over the 'Mashery API' collection in the left sidebar and click the play icon on the righthand side.\n* Select 'Run'.\n* In the 'Delay' text box enter 750 (ms). This prevents any throttling.\n* Select the 'Run Mashery API' button.\n\nThat's it. Depending on your Mashery area's data, it can take several minutes to run. When it completes, you can select the individual requests to examine the response data or select 'Export Results' to save the run in JSON format.\n\n# How do I execute requests individually?\n\nFirst, for the [v3 API](https://developer.mashery.com/docs/read/mashery_api/30) [get an access token](#getting-an-access-token). You can now select any request and run it.\n\nIn order to make the handling of request parameters easier:\n\n1. Some request responses pre-populate data for other requests. For example, executing 'Get Members' builds a list of members, so if you then execute 'Get Members Applications' the 'memberId' in that request is already set.\n2. Requests to create, update and delete resources are grouped in the 'Resources - update' sub-folder. The requests in these folders can be executed in order to show a *typical* create-update-delete workflow. For full details of what's possible, see the [API specification](https://developer.mashery.com/docs/read/mashery_api/30). As above, responses from requests are used to pre-populate resource ids for the next request. For example, 'Post Member' creates a new member and pre-populates the 'memberId' parameter for a subsequent 'Put Member' update request.\n3. You can set the 'limit', 'offset' and 'filter' query parameters. Defaults are 'limit' 100, 'offset' 0 and no filter. You can change these and use it with the 'offset' parameter to page responses over multiple requests. You can use also the 'filter' parameter to customize the response:\n```\nhttps://api.mashery.com/v3/rest/applications?filter=name:Starter%20App\nhttps://api.mashery.com/v3/rest/packages?filter=name:Acme%20OAuth,name:Acme%20Package\n```\nSee the [API specification](https://developer.mashery.com/docs/read/mashery_api/30) for more details.\n\n[v2 Mashery API](https://developer.mashery.com/docs/read/mashery_api/20) example requests can be run directly. For the general 'Object Query' request then set the variable 'v2 object query'.\n\nNote, rather than changing requests themselves, use Postman's 'Environment quick look' to set request parameters. Click the eye icon in the top right, scroll to the top and select 'Edit'.\n\n# Reference\n\n## Getting an access token\n\nTo execute any Mashery API request you need an access token so in Postman go to the Authentication folder and run the 'Get Token' request.\n\nNote: your 'v3 API key' and 'v3 API secret' are used in the Authorization header for the 'Get Token' request. The resulting access token is used in all other requests:\n\n```Authorization: Bearer xxxtokenxxx```\n\nThe token lasts one hour. You can now execute any other request. If you see a response 'Not Authorized', then you need a new token.\n\n## Command line\n\nYou can run the v3 collection from the command line with the Postman '[Newman](https://www.getpostman.com/docs/v6/postman/collection_runs/command_line_integration_with_newman)' utility. You'll need to export from Postman to disk the collection, envronment and globals.\n\n```newman --delay-request 750 --globals \"Tibco Mashery.postman_globals.json\" run \"Mashery API.postman_collection.json\" > Mashery\\ API.log```\n\n## API Specification\n\nThe Mashery v3 API specification is available at:\n\nhttps://developer.mashery.com/docs/read/mashery_api/30\n\nThe Mashery v2 API specification is available at:\n\nhttps://developer.mashery.com/docs/read/mashery_api/20\n\n## JSON to CSV\n\nJSON responses are not very useful if you want to use Excel or similar for further analysis. However, each response is logged to the Postman Console in both CSV and JSON formats.\n\nA few tools to convert JSON to CSV are:\n\n* Use Excel to [convert a JSON file](https://support.office.com/en-us/article/connect-to-a-json-file-f65207ab-d957-4bf0-bec3-a08bb53cd4c0). Note: this is not supported on Microsoft Excel for Mac so use one of the options below.\n* The [Atom editor](https://atom.io/) and install the 'json-converter' package.\n* [json2csv](https://www.npmjs.com/package/json2csv) command line tool.\n\nThere are online options but these are not recommended for security reasons.\n\n## Node.js implementation for v3 API\n\nFirst, install pre-requisite packages (macOS commands shown):\n\n```\nbrew install node\nnpm install newman --save\nnpm install minimist --save\nnpm install url-exists --save\n```\n\nCreate a file masheryapi.js containing:\n\n```javascript\nvar fs = require('fs'),\n    newman = require('newman'),\n    argv = require('minimist')(process.argv.slice(2),\n    urlExists = require('url-exists'),\n      { string: ['key','secret','username','password','area','environment','collection'] }\n    ),\n    results = [],\n    base = new String(process.argv[1]).substring(process.argv[1].lastIndexOf('/') + 1);\n\n// Check arguments\ntry {\n  if (typeof argv.k.length === \"undefined\" ||\n  typeof argv.s.length === \"undefined\" ||\n  typeof argv.u.length === \"undefined\" ||\n  typeof argv.p.length === \"undefined\" ||\n  typeof argv.a.length === \"undefined\" ||\n  typeof argv.c.length === \"undefined\") {\n    throw \"Invalid arguments\";\n  }\n} catch (err) {\n  console.log('\\nusage: node ' + base + ' -k \"v3 API key\" -s \"v3 API secret\" -u \"Mashery username\" -p \"Mashery password\" -a \"Mashery area\" -c \"Collection file or URL\"\\n');\n    console.log('Runs collection with environment and produces a JSON file of the Mashery area.\\n');\n  process.exit(1);;\n};\n\n// Check collection location exists\nurlExists(argv.c, function(err, exists) {\n  if (exists == false) {\n    fs.stat(argv.c, (err, stats) => {\n      if (!stats || !stats.isFile() ) {\n        console.log(\"Collection file \" + argv.c + \" does not exist\");\n        process.exit(1);\n      }\n    });\n  }\n});\n\ncollection = argv.c;\n\nnewman.run({\n    reporters: 'cli',\n    collection: collection,\n    // Populate globals with arguments\n    globals:\n    {\n      \"id\": \"9db4901b-d354-4915-81ae-af422eb76528\",\n      \"values\": [\n        {\n          \"key\": \"v3 API domain\",\n          \"value\": \"api.mashery.com\",\n          \"description\": {\n            \"content\": \"\",\n            \"type\": \"text/plain\"\n          },\n          \"enabled\": true\n        },\n        {\n          \"key\": \"v3 API key\",\n          \"value\": argv.k,\n          \"description\": {\n            \"content\": \"\",\n            \"type\": \"text/plain\"\n          },\n          \"enabled\": true\n        },\n        {\n          \"key\": \"v3 API secret\",\n          \"value\": argv.s,\n          \"description\": {\n            \"content\": \"\",\n            \"type\": \"text/plain\"\n          },\n          \"enabled\": true\n        },\n        {\n          \"key\": \"v3 API username\",\n          \"value\": argv.u,\n          \"description\": {\n            \"content\": \"\",\n            \"type\": \"text/plain\"\n          },\n          \"enabled\": true\n        },\n        {\n          \"key\": \"v3 API password\",\n          \"value\": argv.p,\n          \"description\": {\n            \"content\": \"\",\n            \"type\": \"text/plain\"\n          },\n          \"enabled\": true\n        },\n        {\n          \"key\": \"area id\",\n          \"value\": argv.a,\n          \"type\": \"text\",\n          \"description\": \"\",\n          \"enabled\": true\n        },\n        {\n          \"key\": \"site id\",\n          \"value\": argv.t,\n          \"type\": \"text\",\n          \"description\": \"\",\n          \"enabled\": true\n        }\n      ],\n      \"name\": \"Mashery API Auth\"\n    },\n    delayRequest: 750 // Avoid throttling\n})\n.on('request', function (err, args) {\n    if (!err) {\n        var responseBody = args.response.stream, // Response object\n            body = '\"body\": ' + responseBody.toString().trim();\n            location = '\"location\": \"' + args.request.url.toString().replace(/^.*\\/\\/[^\\/]+/, '').split(/[?#]/)[0].trim() + '\",';   // request - path, no protocol, domain or query string\n            resource = \"{\" + location + body + \"}\";\n        try {\n          results.push(JSON.parse(resource)); // this is just to aggregate all requests/responses into one object\n        } catch(err) {\n          console.log(\"\\nCannot parse resource \" + resource.toString());\n          process.exit(1);\n        }\n    }\n})\n.on('done', function (err, summary) {\n    try {\n      fs.writeFileSync(argv.a + \".json\", JSON.stringify(results, null, 4));  // Write to a file\n    } catch (err) {\n      console.log(\"Cannot create output file \" + argv.a + \".json\");\n    }\n});\n```\n\nExport the Mashery API collection and environment from Postman to disk.\n\nUsage is:\n\nnode masheryapi.js -k \"v3 API key\" -s \"v3 API secret\" -u \"Mashery username\" -p \"Mashery password\" -a \"Mashery area\" -c \"Collection file or URL\"\n\nThis will dump the entire area to a JSON file with name {{area id}}.json.\n\nFor example,\n\n```\nnode masheryapi.js -k 4bwt42e4xxxxxxxfkxsh6xh6 -s Eq5xxxKZ3U -u sdenham@tibco.com -p AP@ssW0rd -a d0f1fd51-e81e-44c7-b4eb-945e2c1c932c -c 'Mashery API.postman_collection.json'\n```\n...will produce d0f1fd51-e81e-44c7-b4eb-945e2c1c932c.json.\n\n",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "v3",
			"item": [
				{
					"name": "Authentication",
					"item": [
						{
							"name": "Get Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8fe83952-407d-4dc3-950c-8106c1fd55f3",
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"if (\"access_token\" in jsonData) {",
											"    pm.globals.set(\"access_token\", jsonData.access_token);",
											"    pm.environment.set(\"access_token\", jsonData.access_token);",
											"    postman.setNextRequest(\"Get Services\");",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{v3 API secret}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{v3 API key}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{v3 API username}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{v3 API password}}",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "{{area id}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://{{v3 API domain}}/v3/token",
									"protocol": "https",
									"host": [
										"{{v3 API domain}}"
									],
									"path": [
										"v3",
										"token"
									]
								},
								"description": "Creates the token required to make v3 API requests."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Resources - read",
					"item": [
						{
							"name": "Members",
							"item": [
								{
									"name": "Member Applications",
									"item": [
										{
											"name": "Get Members Applications",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3057ceb2-ff05-4a93-9275-2faee728f14b",
														"exec": [
															"postman.setNextRequest(\"Get Members Package Keys\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{access_token}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "",
														"value": "",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{v3 API domain}}/v3/rest/members/{{memberId}}/applications?limit={{limit}}&offset=0&filter=",
													"protocol": "https",
													"host": [
														"{{v3 API domain}}"
													],
													"path": [
														"v3",
														"rest",
														"members",
														"{{memberId}}",
														"applications"
													],
													"query": [
														{
															"key": "limit",
															"value": "{{limit}}"
														},
														{
															"key": "offset",
															"value": "0"
														},
														{
															"key": "filter",
															"value": ""
														}
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Get Members",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "587ec4ec-7be5-4a60-87fd-62ea93507946",
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"var memberIds = [];",
													"",
													"jsonData.forEach(function(member) {",
													"    var title = \"Member\" + member.id;",
													"    memberIds.push(member.id);",
													"});",
													"",
													"pm.variables.set(\"memberId\", memberIds.shift());",
													"pm.variables.set(\"memberIds\", JSON.stringify(memberIds));",
													"var memberId = pm.variables.get(\"memberId\");",
													"console.log(\"This Member Id: \" + memberId + \", remaining Members: \" + JSON.stringify(memberIds));",
													"    ",
													"if (memberId) {",
													"    postman.setNextRequest(\"Get Members Applications\");",
													"} else {",
													"    postman.setNextRequest(\"Get Applications\");",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{v3 API domain}}/v3/rest/members?fields={{members fields}}&limit={{limit}}&offset={{offset}}&filter={{filter}}",
											"protocol": "https",
											"host": [
												"{{v3 API domain}}"
											],
											"path": [
												"v3",
												"rest",
												"members"
											],
											"query": [
												{
													"key": "fields",
													"value": "{{members fields}}"
												},
												{
													"key": "limit",
													"value": "{{limit}}"
												},
												{
													"key": "offset",
													"value": "{{offset}}"
												},
												{
													"key": "filter",
													"value": "{{filter}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Members Package Keys",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e01b7409-5853-420d-a50a-5016a5eb1b34",
												"exec": [
													"postman.setNextRequest(\"Get Members Roles\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{v3 API domain}}/v3/rest/members/{{memberId}}/packageKeys?limit={{limit}}&{{offset}}=&filter={{filter}}",
											"protocol": "https",
											"host": [
												"{{v3 API domain}}"
											],
											"path": [
												"v3",
												"rest",
												"members",
												"{{memberId}}",
												"packageKeys"
											],
											"query": [
												{
													"key": "limit",
													"value": "{{limit}}"
												},
												{
													"key": "{{offset}}",
													"value": ""
												},
												{
													"key": "filter",
													"value": "{{filter}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Members Roles",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4adbcade-e6b5-4082-bde3-8307847f7e8f",
												"exec": [
													"// Loop through all members",
													"var memberIds = JSON.parse(pm.variables.get(\"memberIds\"));",
													"",
													"if (memberIds && memberIds.length > 0) {",
													"    pm.variables.set(\"memberId\", memberIds.shift());",
													"    pm.variables.set(\"memberIds\", JSON.stringify(memberIds));",
													"    console.log(\"This Member Id: \" + pm.variables.get(\"memberId\") + \", remaining Members: \" + JSON.stringify(memberIds));",
													"    postman.setNextRequest(\"Get Members Applications\");",
													"} else {",
													"    pm.variables.unset(\"memberId\");",
													"    pm.variables.unset(\"memberIds\");",
													"    postman.setNextRequest(\"Get Applications\");",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{v3 API domain}}/v3/rest/members/{{memberId}}/roles?limit={{limit}}&{{offset}}=&filter={{filter}}",
											"protocol": "https",
											"host": [
												"{{v3 API domain}}"
											],
											"path": [
												"v3",
												"rest",
												"members",
												"{{memberId}}",
												"roles"
											],
											"query": [
												{
													"key": "limit",
													"value": "{{limit}}"
												},
												{
													"key": "{{offset}}",
													"value": ""
												},
												{
													"key": "filter",
													"value": "{{filter}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"description": "This folder contains member, application, role and key requests.",
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{access_token}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "797ccf6e-0154-41e1-9e2b-5ee3857af8f2",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4faaacca-6318-4115-a3da-7f9ab1093c72",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Domains",
							"item": [
								{
									"name": "Public Endpoint Domains",
									"item": [
										{
											"name": "Get Domains Public",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "dec1e347-bedd-4946-8f90-43742e0a39a1",
														"exec": [
															"postman.setNextRequest(\"Get Domains Public Hostnames\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "",
														"value": "",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{v3 API domain}}/v3/rest/domains/public?fields={{public domains fields}}&limit={{limit}}&offset={{offset}}",
													"protocol": "https",
													"host": [
														"{{v3 API domain}}"
													],
													"path": [
														"v3",
														"rest",
														"domains",
														"public"
													],
													"query": [
														{
															"key": "fields",
															"value": "{{public domains fields}}"
														},
														{
															"key": "limit",
															"value": "{{limit}}"
														},
														{
															"key": "offset",
															"value": "{{offset}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Domains Public Hostnames",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2272c0c8-d961-4d3f-a839-9698944c5d9f",
														"exec": [
															"var jsonData = JSON.parse(responseBody);",
															"",
															"if (\"address\" in jsonData[0]) {",
															"    pm.globals.set(\"publicEndpointDomain\", jsonData[0].address);",
															"} else {",
															"    pm.globals.unset(\"publicEndpointDomain\");",
															"}",
															"",
															"postman.setNextRequest(\"Get Domains System Hostnames\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "",
														"value": "",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{v3 API domain}}/v3/rest/domains/public/hostnames?fields={{public hostnames fields}}&limit={{limit}}&offset={{offset}}",
													"protocol": "https",
													"host": [
														"{{v3 API domain}}"
													],
													"path": [
														"v3",
														"rest",
														"domains",
														"public",
														"hostnames"
													],
													"query": [
														{
															"key": "fields",
															"value": "{{public hostnames fields}}"
														},
														{
															"key": "limit",
															"value": "{{limit}}"
														},
														{
															"key": "offset",
															"value": "{{offset}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "System Endpoint Domains",
									"item": [
										{
											"name": "Get Domains System Hostnames",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b6c33471-f3e9-4f52-839e-6b788feaf285",
														"exec": [
															"postman.setNextRequest(\"Get Domains System\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "",
														"value": "",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{v3 API domain}}/v3/rest/domains/system/hostnames?fields={{system hostnames fields}}&limit={{limit}}&offset={{offset}}",
													"protocol": "https",
													"host": [
														"{{v3 API domain}}"
													],
													"path": [
														"v3",
														"rest",
														"domains",
														"system",
														"hostnames"
													],
													"query": [
														{
															"key": "fields",
															"value": "{{system hostnames fields}}"
														},
														{
															"key": "limit",
															"value": "{{limit}}"
														},
														{
															"key": "offset",
															"value": "{{offset}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Domains System",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "81e646bf-022b-454d-ba4c-eb63db7e74f0",
														"exec": [
															"postman.setNextRequest(\"Get Email Template Sets\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "",
														"value": "",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{v3 API domain}}/v3/rest/domains/system?fields={{system domain authentication fields}}&limit={{limit}}&offset={{offset}}",
													"protocol": "https",
													"host": [
														"{{v3 API domain}}"
													],
													"path": [
														"v3",
														"rest",
														"domains",
														"system"
													],
													"query": [
														{
															"key": "fields",
															"value": "{{system domain authentication fields}}"
														},
														{
															"key": "limit",
															"value": "{{limit}}"
														},
														{
															"key": "offset",
															"value": "{{offset}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Get Domains",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3d87e25d-aadb-4cf0-bc52-46ad86b39eb0",
												"exec": [
													"postman.setNextRequest(\"Get Domains Public\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{v3 API domain}}/v3/rest/domains?fields={{domains fields}}&limit={{limit}}&offset={{offset}}",
											"protocol": "https",
											"host": [
												"{{v3 API domain}}"
											],
											"path": [
												"v3",
												"rest",
												"domains"
											],
											"query": [
												{
													"key": "fields",
													"value": "{{domains fields}}"
												},
												{
													"key": "limit",
													"value": "{{limit}}"
												},
												{
													"key": "offset",
													"value": "{{offset}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"description": "This folder contains domain requests.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "82b0154f-255b-4b47-abf0-b0013fe73d0e",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "51bf7d40-6cf6-46f1-8a80-7c93eb11b4f8",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Services",
							"item": [
								{
									"name": "Endpoint",
									"item": [
										{
											"name": "Get Endpoints",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e0651b26-bb27-4483-b379-a29d32b96b70",
														"exec": [
															"var jsonData = JSON.parse(responseBody);",
															"var endpointIds = [];",
															"",
															"jsonData.forEach(function(endpoint) {",
															"    var title = \"Endpoint\" + endpoint.id;",
															"    endpointIds.push(endpoint.id);",
															"});",
															"",
															"pm.variables.set(\"endpointId\", endpointIds.shift());",
															"pm.variables.set(\"endpointIds\", JSON.stringify(endpointIds));",
															"var endpointId = pm.variables.get(\"endpointId\");",
															"console.log(\"This Endpoint Id: \" + endpointId + \", remaining Endpoints: \" + JSON.stringify(endpointIds));",
															"",
															"if (endpointId) {",
															"    postman.setNextRequest(\"Get Endpoints Scheduled Maintenance Event\");",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "",
														"value": "",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{v3 API domain}}/v3/rest/services/{{serviceId}}/endpoints?fields={{endpoints fields}}&limit={{limit}}&offset={{offset}}",
													"protocol": "https",
													"host": [
														"{{v3 API domain}}"
													],
													"path": [
														"v3",
														"rest",
														"services",
														"{{serviceId}}",
														"endpoints"
													],
													"query": [
														{
															"key": "fields",
															"value": "{{endpoints fields}}"
														},
														{
															"key": "limit",
															"value": "{{limit}}"
														},
														{
															"key": "offset",
															"value": "{{offset}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Endpoints Scheduled Maintenance Event",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6c13f870-1a29-4b8c-9235-0a1cc8b22ca8",
														"exec": [
															"postman.setNextRequest(\"Get Endpoints CORS\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "",
														"value": "",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{v3 API domain}}/v3/rest/services/{{serviceId}}/endpoints/{{endpointId}}/scheduledMaintenanceEvent?limit={{limit}}&offset={{offset}}&filter={{filter}}",
													"protocol": "https",
													"host": [
														"{{v3 API domain}}"
													],
													"path": [
														"v3",
														"rest",
														"services",
														"{{serviceId}}",
														"endpoints",
														"{{endpointId}}",
														"scheduledMaintenanceEvent"
													],
													"query": [
														{
															"key": "limit",
															"value": "{{limit}}"
														},
														{
															"key": "offset",
															"value": "{{offset}}"
														},
														{
															"key": "filter",
															"value": "{{filter}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Endpoints CORS",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "961bc4bd-acb8-41f1-afc7-a32a43155af3",
														"exec": [
															"postman.setNextRequest(\"Get Endpoints Cache\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "",
														"value": "",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{v3 API domain}}/v3/rest/services/{{serviceId}}/endpoints/{{endpointId}}/cors?limit={{limit}}&offset={{offset}}&filter={{filter}}",
													"protocol": "https",
													"host": [
														"{{v3 API domain}}"
													],
													"path": [
														"v3",
														"rest",
														"services",
														"{{serviceId}}",
														"endpoints",
														"{{endpointId}}",
														"cors"
													],
													"query": [
														{
															"key": "limit",
															"value": "{{limit}}"
														},
														{
															"key": "offset",
															"value": "{{offset}}"
														},
														{
															"key": "filter",
															"value": "{{filter}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Endpoints Cache",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "fd75487b-5588-4ba2-b75d-34a83e50ffb5",
														"exec": [
															"postman.setNextRequest(\"Get Endpoints System Domain Authentication\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "",
														"value": "",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{v3 API domain}}/v3/rest/services/{{serviceId}}/endpoints/{{endpointId}}/cache?limit={{limit}}&offset={{offset}}&filter={{filter}}",
													"protocol": "https",
													"host": [
														"{{v3 API domain}}"
													],
													"path": [
														"v3",
														"rest",
														"services",
														"{{serviceId}}",
														"endpoints",
														"{{endpointId}}",
														"cache"
													],
													"query": [
														{
															"key": "limit",
															"value": "{{limit}}"
														},
														{
															"key": "offset",
															"value": "{{offset}}"
														},
														{
															"key": "filter",
															"value": "{{filter}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Endpoints System Domain Authentication",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "008fa075-3796-4da6-b1c4-40700e89f11d",
														"exec": [
															"postman.setNextRequest(\"Get Endpoints Methods\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "",
														"value": "",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{v3 API domain}}/v3/rest/services/{{serviceId}}/endpoints/{{endpointId}}/systemDomainAuthentication?limit={{limit}}&offset={{offset}}&filter={{filter}}",
													"protocol": "https",
													"host": [
														"{{v3 API domain}}"
													],
													"path": [
														"v3",
														"rest",
														"services",
														"{{serviceId}}",
														"endpoints",
														"{{endpointId}}",
														"systemDomainAuthentication"
													],
													"query": [
														{
															"key": "limit",
															"value": "{{limit}}"
														},
														{
															"key": "offset",
															"value": "{{offset}}"
														},
														{
															"key": "filter",
															"value": "{{filter}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Endpoints Methods",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "20111437-0205-452c-98db-50f2d9885bf8",
														"exec": [
															"var jsonData = JSON.parse(responseBody);",
															"var methodIds = [];",
															"",
															"jsonData.forEach(function(method) {",
															"    var title = \"Method\" + method.id;",
															"    methodIds.push(method.id);",
															"});",
															"",
															"pm.variables.set(\"methodId\", methodIds.shift());",
															"pm.variables.set(\"methodIds\", JSON.stringify(methodIds));",
															"var methodId = pm.variables.get(\"methodId\");",
															"console.log(\"This Method Id: \" + pm.variables.get(\"methodId\") + \", remaining Methods: \" + JSON.stringify(methodIds));",
															"",
															"postman.setNextRequest(\"Get Endpoints Response Filters\");",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "",
														"value": "",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{v3 API domain}}/v3/rest/services/{{serviceId}}/endpoints/{{endpointId}}/methods?limit={{limit}}&offset={{offset}}",
													"protocol": "https",
													"host": [
														"{{v3 API domain}}"
													],
													"path": [
														"v3",
														"rest",
														"services",
														"{{serviceId}}",
														"endpoints",
														"{{endpointId}}",
														"methods"
													],
													"query": [
														{
															"key": "limit",
															"value": "{{limit}}"
														},
														{
															"key": "offset",
															"value": "{{offset}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Endpoints Response Filters",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "036e7a4c-7155-4b9e-a570-38a2762ebf4d",
														"exec": [
															"// Loop through all endpoints",
															"var endpointIds = JSON.parse(pm.variables.get(\"endpointIds\"));",
															"var methodIds = JSON.parse(pm.variables.get(\"methodIds\"));",
															"",
															"if (methodIds && methodIds.length > 0) {",
															"    pm.variables.set(\"methodId\", methodIds.shift());",
															"    pm.variables.set(\"methodIds\", JSON.stringify(methodIds));",
															"    console.log(\"This Method Id: \" + pm.variables.get(\"methodId\") + \", remaining Methods: \" + JSON.stringify(methodIds));",
															"    postman.setNextRequest(\"Get Endpoints Response Filters\");",
															"} else if (endpointIds && endpointIds.length > 0) {",
															"    // No more methods so try next endpoint",
															"    pm.variables.unset(\"methodId\");",
															"    pm.variables.unset(\"methodIds\");",
															"    pm.variables.set(\"endpointId\", endpointIds.shift());",
															"    pm.variables.set(\"endpointIds\", JSON.stringify(endpointIds));",
															"    console.log(\"This Endpoint Id: \" + pm.variables.get(\"endpointId\") + \", remaining Endpoints: \" + JSON.stringify(endpointIds));",
															"    postman.setNextRequest(\"Get Endpoints Scheduled Maintenance Event\");",
															"} else {",
															"    // No more endpoints so try next service",
															"    pm.variables.unset(\"endpointId\");",
															"    pm.variables.unset(\"endpointIds\");",
															"",
															"    var serviceIds = JSON.parse(pm.variables.get(\"serviceIds\"));",
															"    if (serviceIds && serviceIds.length > 0) {",
															"        pm.variables.set(\"serviceId\", serviceIds.shift());",
															"        pm.variables.set(\"serviceIds\", JSON.stringify(serviceIds));",
															"        console.log(\"This Service Id: \" + pm.variables.get(\"serviceId\") + \", remaining Services: \" + JSON.stringify(serviceIds));",
															"        postman.setNextRequest(\"Get Services Roles\");",
															"    } else {",
															"        // No more services",
															"        pm.variables.unset(\"serviceId\");",
															"        pm.variables.unset(\"serviceIds\");",
															"        pm.variables.unset(\"endpointId\");",
															"        pm.variables.unset(\"endpointIds\");",
															"        pm.variables.unset(\"methodId\");",
															"        pm.variables.unset(\"methodIds\");",
															"        postman.setNextRequest(\"Get Members\");",
															"    }",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "",
														"value": "",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{v3 API domain}}/v3/rest/services/{{serviceId}}/endpoints/{{endpointId}}/methods/{{methodId}}/responseFilters?limit={{limit}}&offset={{offset}}",
													"protocol": "https",
													"host": [
														"{{v3 API domain}}"
													],
													"path": [
														"v3",
														"rest",
														"services",
														"{{serviceId}}",
														"endpoints",
														"{{endpointId}}",
														"methods",
														"{{methodId}}",
														"responseFilters"
													],
													"query": [
														{
															"key": "limit",
															"value": "{{limit}}"
														},
														{
															"key": "offset",
															"value": "{{offset}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"description": "This folder contains requests that return endpoint resources.",
									"auth": {
										"type": "bearer",
										"bearer": [
											{
												"key": "token",
												"value": "{{access_token}}",
												"type": "string"
											}
										]
									},
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4f467ec3-a9f9-45e6-9d76-f063078a345f",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "83b78a02-8e6d-499e-a9c8-ae73b761b9bd",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Service Cache",
									"item": [
										{
											"name": "Get Services Cache",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "218e653a-6ec5-44e5-9905-5908992ed5f8",
														"exec": [
															"postman.setNextRequest(\"Get Services Error Sets\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "",
														"value": "",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{v3 API domain}}/v3/rest/services/{{serviceId}}/cache?limit={{limit}}&offset={{offset}}&filter={{filter}}",
													"protocol": "https",
													"host": [
														"{{v3 API domain}}"
													],
													"path": [
														"v3",
														"rest",
														"services",
														"{{serviceId}}",
														"cache"
													],
													"query": [
														{
															"key": "limit",
															"value": "{{limit}}"
														},
														{
															"key": "offset",
															"value": "{{offset}}"
														},
														{
															"key": "filter",
															"value": "{{filter}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Security Profile",
									"item": [
										{
											"name": "Get Services Security Profile",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "10a5cdb4-0ae8-4b51-b719-5253d2a4303e",
														"exec": [
															"postman.setNextRequest(\"Get Services Security Profile OAuth\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "",
														"value": "",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{v3 API domain}}/v3/rest/services/{{serviceId}}/securityProfile?limit={{limit}}&offset={{offset}}&filter={{filter}}",
													"protocol": "https",
													"host": [
														"{{v3 API domain}}"
													],
													"path": [
														"v3",
														"rest",
														"services",
														"{{serviceId}}",
														"securityProfile"
													],
													"query": [
														{
															"key": "limit",
															"value": "{{limit}}"
														},
														{
															"key": "offset",
															"value": "{{offset}}"
														},
														{
															"key": "filter",
															"value": "{{filter}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Services Security Profile OAuth",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "febd6952-e21e-4040-91e6-d331d61a2109",
														"exec": [
															"postman.setNextRequest(\"Get Services Cache\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "",
														"value": "",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{v3 API domain}}/v3/rest/services/{{serviceId}}/securityProfile/oauth?limit={{limit}}&offset={{offset}}&filter={{filter}}",
													"protocol": "https",
													"host": [
														"{{v3 API domain}}"
													],
													"path": [
														"v3",
														"rest",
														"services",
														"{{serviceId}}",
														"securityProfile",
														"oauth"
													],
													"query": [
														{
															"key": "limit",
															"value": "{{limit}}"
														},
														{
															"key": "offset",
															"value": "{{offset}}"
														},
														{
															"key": "filter",
															"value": "{{filter}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Service Role",
									"item": [
										{
											"name": "Get Services Roles",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "12a56837-5131-4398-b360-7b1c262ee636",
														"exec": [
															"var jsonData = JSON.parse(responseBody);",
															"",
															"if (jsonData && \"id\" in jsonData[0]) {",
															"    pm.globals.set(\"serviceRoleId\", jsonData[0].id);",
															"} else {",
															"    pm.globals.unset(\"serviceRoleId\");",
															"}",
															"",
															"postman.setNextRequest(\"Get Services Security Profile\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "",
														"value": "",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{v3 API domain}}/v3/rest/services/{{serviceId}}/roles?fields={{service roles fields}}&limit={{limit}}&offset={{offset}}",
													"protocol": "https",
													"host": [
														"{{v3 API domain}}"
													],
													"path": [
														"v3",
														"rest",
														"services",
														"{{serviceId}}",
														"roles"
													],
													"query": [
														{
															"key": "fields",
															"value": "{{service roles fields}}"
														},
														{
															"key": "limit",
															"value": "{{limit}}"
														},
														{
															"key": "offset",
															"value": "{{offset}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Error Set",
									"item": [
										{
											"name": "Get Services Error Sets",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e2a6d583-0ca8-41e1-8456-00691d1f4937",
														"exec": [
															"var jsonData = JSON.parse(responseBody);",
															"var errorSetIds = [];",
															"",
															"if (jsonData[0].id) {",
															"",
															"    jsonData.forEach(function(errorSet) {",
															"        var title = \"Error Set\" + errorSet.id;",
															"        errorSetIds.push(errorSet.id);",
															"    });",
															"    ",
															"    pm.variables.set(\"errorSetId\", errorSetIds.shift());",
															"    pm.variables.set(\"errorSetIds\", JSON.stringify(errorSetIds));",
															"    console.log(\"This Error Set Id: \" + pm.variables.get(\"errorSetId\") + \", remaining Error Sets: \" + JSON.stringify(errorSetIds));",
															"    postman.setNextRequest(\"Get Services Error Messages\");",
															"} else {",
															"    pm.variables.unset(\"errorSetId\");",
															"    pm.variables.unset(\"errorSetIds\");",
															"    postman.setNextRequest(\"Get Endpoints\");",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "",
														"value": "",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{v3 API domain}}/v3/rest/services/{{serviceId}}/errorSets?limit={{limit}}&offset={{offset}}",
													"protocol": "https",
													"host": [
														"{{v3 API domain}}"
													],
													"path": [
														"v3",
														"rest",
														"services",
														"{{serviceId}}",
														"errorSets"
													],
													"query": [
														{
															"key": "limit",
															"value": "{{limit}}"
														},
														{
															"key": "offset",
															"value": "{{offset}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Services Error Messages",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "032efacd-4f40-4934-a1cd-437f7c004645",
														"exec": [
															"var errorSetIds = JSON.parse(pm.variables.get(\"errorSetIds\"));",
															"",
															"// Loop through all error sets",
															"if (errorSetIds[0]) {",
															"  pm.variables.set(\"errorSetId\", errorSetIds.shift());",
															"  pm.variables.set(\"errorSetIds\", JSON.stringify(errorSetIds));",
															"  postman.setNextRequest(\"Get Services Error Messages\");",
															"} else {",
															"  pm.variables.unset(\"errorSetId\");",
															"  pm.variables.unset(\"errorSetIds\");",
															"}",
															"",
															"postman.setNextRequest(\"Get Endpoints\");"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "",
														"value": "",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{v3 API domain}}/v3/rest/services/{{serviceId}}/errorSets/{{errorSetId}}/errorMessages?limit={{limit}}&offset={{offset}}",
													"protocol": "https",
													"host": [
														"{{v3 API domain}}"
													],
													"path": [
														"v3",
														"rest",
														"services",
														"{{serviceId}}",
														"errorSets",
														"{{errorSetId}}",
														"errorMessages"
													],
													"query": [
														{
															"key": "limit",
															"value": "{{limit}}"
														},
														{
															"key": "offset",
															"value": "{{offset}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Get Services",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f02e881a-6ca8-4ab5-9b68-d9c35f9289c0",
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"var serviceIds = [];",
													"",
													"jsonData.forEach(function(service) {",
													"    var title = \"Service\" + service.id;",
													"    serviceIds.push(service.id);",
													"});",
													"",
													"pm.variables.set(\"serviceId\", serviceIds.shift());",
													"pm.variables.set(\"serviceIds\", JSON.stringify(serviceIds));",
													"var serviceId = pm.variables.get(\"serviceId\");",
													"console.log(\"This Service Id: \" + serviceId + \", remaining Services: \" + JSON.stringify(serviceIds));",
													"    ",
													"if (serviceId) {",
													"    postman.setNextRequest(\"Get Services IO Docs\");",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{v3 API domain}}/v3/rest/services?fields={{service fields}}&limit={{limit}}&offset={{offset}}",
											"protocol": "https",
											"host": [
												"{{v3 API domain}}"
											],
											"path": [
												"v3",
												"rest",
												"services"
											],
											"query": [
												{
													"key": "fields",
													"value": "{{service fields}}"
												},
												{
													"key": "limit",
													"value": "{{limit}}"
												},
												{
													"key": "offset",
													"value": "{{offset}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Services IO Docs",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "218e653a-6ec5-44e5-9905-5908992ed5f8",
												"exec": [
													"postman.setNextRequest(\"Get Services Swagger\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{v3 API domain}}/v3/rest/iodocs/services/{{serviceId}}",
											"protocol": "https",
											"host": [
												"{{v3 API domain}}"
											],
											"path": [
												"v3",
												"rest",
												"iodocs",
												"services",
												"{{serviceId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Services Swagger",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "218e653a-6ec5-44e5-9905-5908992ed5f8",
												"exec": [
													"postman.setNextRequest(\"Get Services Roles\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{v3 API domain}}/v3/rest/services/docs/{{serviceId}}",
											"protocol": "https",
											"host": [
												"{{v3 API domain}}"
											],
											"path": [
												"v3",
												"rest",
												"services",
												"docs",
												"{{serviceId}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "This folder contains requests relating to service resources.",
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{access_token}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0746fe0e-56b5-4aba-9fa4-6371835ebb8f",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2798949e-05a8-41df-867f-e92c48d51887",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Applications",
							"item": [
								{
									"name": "Application Package Keys",
									"item": [
										{
											"name": "Get Applications Package Keys",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "97371408-ca8a-4e35-a726-6ee4b0b11e88",
														"exec": [
															"// Loop through all applications",
															"var applicationIds = JSON.parse(pm.variables.get(\"applicationIds\"));",
															"",
															"if (applicationIds && applicationIds.length > 0) {",
															"    pm.variables.set(\"applicationId\", applicationIds.shift());",
															"    pm.variables.set(\"applicationIds\", JSON.stringify(applicationIds));",
															"    console.log(\"This Application Id: \" + pm.variables.get(\"applicationId\") + \", remaining Applications: \" + JSON.stringify(applicationIds));",
															"    postman.setNextRequest(\"Get Applications Package Keys\");",
															"} else {",
															"    pm.variables.unset(\"applicationId\");",
															"    pm.variables.unset(\"applicationIds\");",
															"    postman.setNextRequest(\"Get Package Keys\");",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "",
														"value": "",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{v3 API domain}}/v3/rest/applications/{{applicationId}}/packageKeys?limit={{limit}}&offset={{offset}}&filter={{filter}}",
													"protocol": "https",
													"host": [
														"{{v3 API domain}}"
													],
													"path": [
														"v3",
														"rest",
														"applications",
														"{{applicationId}}",
														"packageKeys"
													],
													"query": [
														{
															"key": "limit",
															"value": "{{limit}}"
														},
														{
															"key": "offset",
															"value": "{{offset}}"
														},
														{
															"key": "filter",
															"value": "{{filter}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Get Applications",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "def78176-1e91-4dd2-b927-54a578fab393",
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"var applicationIds = [];",
													"",
													"jsonData.forEach(function(application) {",
													"    var title = \"Application\" + application.id;",
													"    applicationIds.push(application.id);",
													"});",
													"",
													"pm.variables.set(\"applicationId\", applicationIds.shift());",
													"pm.variables.set(\"applicationIds\", JSON.stringify(applicationIds));",
													"var applicationId = pm.variables.get(\"applicationId\");",
													"console.log(\"This Application Id: \" + applicationId + \", remaining Applications: \" + JSON.stringify(applicationIds));",
													"    ",
													"if (applicationId) {",
													"    postman.setNextRequest(\"Get Applications Package Keys\");",
													"} else {",
													"    pm.variables.unset(\"applicationId\");",
													"    pm.variables.unset(\"applicationIds\");",
													"    postman.setNextRequest(\"Get Package Keys\");",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{v3 API domain}}/v3/rest/applications?fields={{application fields}}&limit={{limit}}&offset={{offset}}",
											"protocol": "https",
											"host": [
												"{{v3 API domain}}"
											],
											"path": [
												"v3",
												"rest",
												"applications"
											],
											"query": [
												{
													"key": "fields",
													"value": "{{application fields}}"
												},
												{
													"key": "limit",
													"value": "{{limit}}"
												},
												{
													"key": "offset",
													"value": "{{offset}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"description": "This folder contains application and application key requests.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8b36e784-9aab-4aaa-bec4-fa3105b48bbc",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1b4ce4f6-f0a3-4ecc-9a8a-dfb9c899ae09",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Scheduled Maintenance Events",
							"item": [
								{
									"name": "Get Scheduled Maintenance Events",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1b168d45-4acc-48c6-a6d8-d0ed543a820f",
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"var scheduledMaintenanceEventIds = [];",
													"",
													"jsonData.forEach(function(scheduledMaintenanceEvent) {",
													"    var title = \"Scheduled Maintenance Event\" + scheduledMaintenanceEvent.id;",
													"    scheduledMaintenanceEventIds.push(scheduledMaintenanceEvent.id);",
													"});",
													"",
													"pm.variables.set(\"scheduledMaintenanceEventId\", scheduledMaintenanceEventIds.shift());",
													"pm.variables.set(\"scheduledMaintenanceEventIds\", JSON.stringify(scheduledMaintenanceEventIds));",
													"var scheduledMaintenanceEventId = pm.variables.get(\"scheduledMaintenanceEventId\");",
													"console.log(\"This Scheduled Maintenance EventId: \" + scheduledMaintenanceEventId + \", remaining This Scheduled Maintenance Events: \" + JSON.stringify(scheduledMaintenanceEventIds));",
													"    ",
													"if (scheduledMaintenanceEventId) {",
													"    postman.setNextRequest(\"Get Scheduled Maintenance Events Endpoint\");",
													"} else {",
													"    pm.variables.unset(\"serviceId\");",
													"    pm.variables.unset(\"serviceIds\");",
													"    pm.variables.unset(\"errorSetId\");",
													"    pm.variables.unset(\"errorSetIds\");",
													"    pm.variables.unset(\"endpointId\");",
													"    pm.variables.unset(\"endpointIds\");",
													"    pm.variables.unset(\"memberId\");",
													"    pm.variables.unset(\"memberIds\");",
													"    pm.variables.unset(\"methodId\");",
													"    pm.variables.unset(\"methodIds\");",
													"    pm.variables.unset(\"planId\");",
													"    pm.variables.unset(\"planIds\");",
													"    pm.variables.unset(\"apiPackageId\");",
													"    pm.variables.unset(\"apiPackageIds\");",
													"    pm.variables.unset(\"applicationId\");",
													"    pm.variables.unset(\"applicationIds\");",
													"    pm.variables.unset(\"emailTemplateSetsId\");",
													"    pm.variables.unset(\"emailTemplateSetsIds\");",
													"    pm.variables.unset(\"scheduledMaintenanceEventId\");",
													"    pm.variables.unset(\"scheduledMaintenanceEventIds\");",
													"    postman.setNextRequest(null);",
													"}",
													"    ",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{v3 API domain}}/v3/rest/scheduledMaintenanceEvents?fields={{scheduled maintenance event fields}}&limit={{limit}}&offset={{offset}}",
											"protocol": "https",
											"host": [
												"{{v3 API domain}}"
											],
											"path": [
												"v3",
												"rest",
												"scheduledMaintenanceEvents"
											],
											"query": [
												{
													"key": "fields",
													"value": "{{scheduled maintenance event fields}}"
												},
												{
													"key": "limit",
													"value": "{{limit}}"
												},
												{
													"key": "offset",
													"value": "{{offset}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Scheduled Maintenance Events Endpoint",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1b168d45-4acc-48c6-a6d8-d0ed543a820f",
												"exec": [
													"// Loop through all members",
													"var scheduledMaintenanceEventIds = JSON.parse(pm.variables.get(\"scheduledMaintenanceEventIds\"));",
													"",
													"if (scheduledMaintenanceEventIds && scheduledMaintenanceEventIds.length > 0) {",
													"    pm.variables.set(\"scheduledMaintenanceEventId\", scheduledMaintenanceEventIds.shift());",
													"    pm.variables.set(\"scheduledMaintenanceEventIds\", JSON.stringify(scheduledMaintenanceEventIds));",
													"console.log(\"This Scheduled Maintenance Event Id: \" + scheduledMaintenanceEventId + \", remaining This Scheduled Maintenance Events: \" + JSON.stringify(scheduledMaintenanceEventIds));",
													"    postman.setNextRequest(\"Get Scheduled Maintenance Events Endpoint\");",
													"} else {",
													"    pm.variables.unset(\"serviceId\");",
													"    pm.variables.unset(\"serviceIds\");",
													"    pm.variables.unset(\"errorSetId\");",
													"    pm.variables.unset(\"errorSetIds\");",
													"    pm.variables.unset(\"endpointId\");",
													"    pm.variables.unset(\"endpointIds\");",
													"    pm.variables.unset(\"memberId\");",
													"    pm.variables.unset(\"memberIds\");",
													"    pm.variables.unset(\"methodId\");",
													"    pm.variables.unset(\"methodIds\");",
													"    pm.variables.unset(\"planId\");",
													"    pm.variables.unset(\"planIds\");",
													"    pm.variables.unset(\"apiPackageId\");",
													"    pm.variables.unset(\"apiPackageIds\");",
													"    pm.variables.unset(\"applicationId\");",
													"    pm.variables.unset(\"applicationIds\");",
													"    pm.variables.unset(\"emailTemplateSetsId\");",
													"    pm.variables.unset(\"emailTemplateSetsIds\");",
													"    pm.variables.unset(\"scheduledMaintenanceEventId\");",
													"    pm.variables.unset(\"scheduledMaintenanceEventIds\");",
													"    postman.setNextRequest(null);",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{v3 API domain}}/v3/rest/scheduledMaintenanceEvents/{{scheduledMaintenanceEventId}}/endpoints?limit={{limit}}&offset={{offset}}",
											"protocol": "https",
											"host": [
												"{{v3 API domain}}"
											],
											"path": [
												"v3",
												"rest",
												"scheduledMaintenanceEvents",
												"{{scheduledMaintenanceEventId}}",
												"endpoints"
											],
											"query": [
												{
													"key": "limit",
													"value": "{{limit}}"
												},
												{
													"key": "offset",
													"value": "{{offset}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"description": "This folder contains scheduled maintenance event requests.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "51ac5e85-aafd-4599-b8c3-0525281a03bb",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "ff656e06-a016-4753-8e36-0383554e1d77",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Packages and Plans",
							"item": [
								{
									"name": "Plans",
									"item": [
										{
											"name": "Plan Services",
											"item": [
												{
													"name": "Get Packages Plans Services",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "081831f7-6112-42cd-a892-b7514809802b",
																"exec": [
																	"planIds = JSON.parse(pm.variables.get(\"planIds\"));",
																	"if (planIds[0]) {",
																	"    planId = planIds.shift();",
																	"    console.log(\"This plan Id: \" + planId + \", remaining plans: \" + JSON.stringify(planIds));",
																	"    pm.variables.set(\"planId\", planId);",
																	"    pm.variables.set(\"planIds\", JSON.stringify(planIds));",
																	"    postman.setNextRequest(\"Get Packages Plans Services\");",
																	"} else {",
																	"    // Next package",
																	"    apiPackageIds = JSON.parse(pm.variables.get(\"apiPackageIds\"));",
																	"    if (apiPackageIds[0]) {",
																	"        apiPackageId = apiPackageIds.shift();",
																	"        pm.variables.set(\"apiPackageId\",apiPackageId);",
																	"        pm.variables.set(\"apiPackageIds\",JSON.stringify(apiPackageIds));",
																	"        console.log(\"This apiPackage Id: \" + apiPackageId + \", remaining apiPackages: \" + JSON.stringify(apiPackageIds));",
																	"        postman.setNextRequest(\"Get Packages Plans\");",
																	"    } else {",
																	"        postman.setNextRequest(\"Get Domains\");",
																	"    }",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "",
																"value": "",
																"disabled": true
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "https://{{v3 API domain}}/v3/rest/packages/{{apiPackageId}}/plans/{{planId}}/services?limit={{limit}}&offset=0",
															"protocol": "https",
															"host": [
																"{{v3 API domain}}"
															],
															"path": [
																"v3",
																"rest",
																"packages",
																"{{apiPackageId}}",
																"plans",
																"{{planId}}",
																"services"
															],
															"query": [
																{
																	"key": "limit",
																	"value": "{{limit}}"
																},
																{
																	"key": "offset",
																	"value": "0"
																}
															]
														}
													},
													"response": []
												}
											],
											"_postman_isSubFolder": true
										},
										{
											"name": "Get Packages Plans",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "081831f7-6112-42cd-a892-b7514809802b",
														"exec": [
															"var jsonData = JSON.parse(responseBody);",
															"var planIds = [];",
															"",
															"jsonData.forEach(function(plan) {",
															"    var title = \"plan\" + plan.id;",
															"    planIds.push(plan.id);",
															"});",
															"",
															"if (planIds[0]) {",
															"    pm.variables.set(\"planId\", planIds.shift());",
															"    pm.variables.set(\"planIds\", JSON.stringify(planIds));",
															"    var planId = pm.variables.get(\"planId\");",
															"    console.log(\"This plan Id: \" + planId + \", remaining plans: \" + JSON.stringify(planIds));",
															"    postman.setNextRequest(\"Get Packages Plans Services\");",
															"} else {",
															"    // Next package",
															"    apiPackageIds = JSON.parse(pm.variables.get(\"apiPackageIds\"));",
															"    if (apiPackageIds[0]) {",
															"        apiPackageId = apiPackageIds.shift();",
															"        pm.variables.set(\"apiPackageId\",apiPackageId);",
															"        pm.variables.set(\"apiPackageIds\",JSON.stringify(apiPackageIds));",
															"        console.log(\"This apiPackage Id: \" + apiPackageId + \", remaining apiPackages: \" + JSON.stringify(apiPackageIds));",
															"        postman.setNextRequest(\"Get Packages Plans\");",
															"    } else {",
															"        postman.setNextRequest(\"Get Domains\");",
															"    }",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "",
														"value": "",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{v3 API domain}}/v3/rest/packages/{{apiPackageId}}/plans?limit={{limit}}&offset={{offset}}",
													"protocol": "https",
													"host": [
														"{{v3 API domain}}"
													],
													"path": [
														"v3",
														"rest",
														"packages",
														"{{apiPackageId}}",
														"plans"
													],
													"query": [
														{
															"key": "limit",
															"value": "{{limit}}"
														},
														{
															"key": "offset",
															"value": "{{offset}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Get Packages",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "081831f7-6112-42cd-a892-b7514809802b",
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"var apiPackageIds = [];",
													"",
													"jsonData.forEach(function(apiPackage) {",
													"    var title = \"apiPackage\" + apiPackage.id;",
													"    apiPackageIds.push(apiPackage.id);",
													"});",
													"",
													"pm.variables.set(\"apiPackageId\", apiPackageIds.shift());",
													"pm.variables.set(\"apiPackageIds\", JSON.stringify(apiPackageIds));",
													"var apiPackageId = pm.variables.get(\"apiPackageId\");",
													"console.log(\"This apiPackage Id: \" + apiPackageId + \", remaining apiPackages: \" + JSON.stringify(apiPackageIds));",
													"    ",
													"if (apiPackageId) {",
													"    postman.setNextRequest(\"Get Packages Plans\");",
													"} else {",
													"    postman.setNextRequest(\"Get Domains\");",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{v3 API domain}}/v3/rest/packages?fields={{package fields}}&limit={{limit}}&offset={{offset}}",
											"protocol": "https",
											"host": [
												"{{v3 API domain}}"
											],
											"path": [
												"v3",
												"rest",
												"packages"
											],
											"query": [
												{
													"key": "fields",
													"value": "{{package fields}}"
												},
												{
													"key": "limit",
													"value": "{{limit}}"
												},
												{
													"key": "offset",
													"value": "{{offset}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"description": "This folder contains package, plan and key requests.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8be70bf1-08b0-4e2b-a2c2-e85155d36d25",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9b3f58e1-10e3-4f68-b6dd-08c43b0e8a19",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Package Keys",
							"item": [
								{
									"name": "Get Package Keys",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2a3cdeca-0671-4a33-aa81-76ddbe9764e1",
												"exec": [
													"postman.setNextRequest(\"Get Roles\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{v3 API domain}}/v3/rest/packageKeys?fields={{package keys fields}}&limit={{limit}}&offset={{offset}}&filter={{filter}}",
											"protocol": "https",
											"host": [
												"{{v3 API domain}}"
											],
											"path": [
												"v3",
												"rest",
												"packageKeys"
											],
											"query": [
												{
													"key": "fields",
													"value": "{{package keys fields}}"
												},
												{
													"key": "limit",
													"value": "{{limit}}"
												},
												{
													"key": "offset",
													"value": "{{offset}}"
												},
												{
													"key": "filter",
													"value": "{{filter}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Email Templates Sets",
							"item": [
								{
									"name": "Get Email Template Sets",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b4c695bd-889d-4a8b-9c6e-fdcefc917c6e",
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"var emailTemplateSetsIds = [];",
													"",
													"jsonData.forEach(function(emailTemplateSets) {",
													"    var title = \"EmailTemplateSets\" + emailTemplateSets.id;",
													"    emailTemplateSetsIds.push(emailTemplateSets.id);",
													"});",
													"",
													"pm.variables.set(\"emailTemplateSetsId\", emailTemplateSetsIds.shift());",
													"pm.variables.set(\"emailTemplateSetsIds\", JSON.stringify(emailTemplateSetsIds));",
													"var emailTemplateSetsId = pm.variables.get(\"emailTemplateSetsId\");",
													"console.log(\"This EmailTemplateSet Id: \" + emailTemplateSetsId + \", remaining emailTemplateSets: \" + JSON.stringify(emailTemplateSetsIds));",
													"    ",
													"if (emailTemplateSetsId) {",
													"    postman.setNextRequest(\"Get Email Templates\");",
													"} else {",
													"    pm.variables.unset(\"emailTemplateSetsId\");",
													"    pm.variables.unset(\"emailTemplateSetsIds\");",
													"    postman.setNextRequest(\"Get Scheduled Maintenance Events\");",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{v3 API domain}}/v3/rest/emailTemplateSets?limit={{limit}}&offset={{offset}}",
											"protocol": "https",
											"host": [
												"{{v3 API domain}}"
											],
											"path": [
												"v3",
												"rest",
												"emailTemplateSets"
											],
											"query": [
												{
													"key": "limit",
													"value": "{{limit}}"
												},
												{
													"key": "offset",
													"value": "{{offset}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get Email Templates",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "02adfa01-1c22-4da2-b42b-24179f39b483",
												"exec": [
													"// Loop through all email template sets",
													"var emailTemplateSetsIds = JSON.parse(pm.variables.get(\"emailTemplateSetsIds\"));",
													"console.log(responseBody);",
													"if (emailTemplateSetsIds[0]) {",
													"    pm.variables.set(\"emailTemplateSetsId\", emailTemplateSetsIds.shift());",
													"    pm.variables.set(\"emailTemplateSetsIds\", JSON.stringify(emailTemplateSetsIds));",
													"    console.log(\"This Email Template Set Id: \" + pm.variables.get(\"emailTemplateSetsId\") + \", remaining Email Template Sets: \" + JSON.stringify(emailTemplateSetsIds));",
													"    postman.setNextRequest(\"Get Email Templates\");",
													"} else {",
													"    pm.variables.unset(\"emailTemplateSetsId\");",
													"    pm.variables.unset(\"emailTemplateSetsIds\");",
													"    postman.setNextRequest(\"Get Scheduled Maintenance Events\");",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{v3 API domain}}/v3/rest/emailTemplateSets/{{emailTemplateSetsId}}/emailTemplates?limit={{limit}}&offset={{offset}}",
											"protocol": "https",
											"host": [
												"{{v3 API domain}}"
											],
											"path": [
												"v3",
												"rest",
												"emailTemplateSets",
												"{{emailTemplateSetsId}}",
												"emailTemplates"
											],
											"query": [
												{
													"key": "limit",
													"value": "{{limit}}"
												},
												{
													"key": "offset",
													"value": "{{offset}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Roles",
							"item": [
								{
									"name": "Get Roles",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "087bb15d-a9b8-4980-8657-b67f80fbeeac",
												"exec": [
													"postman.setNextRequest(\"Get Packages\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "",
												"value": "",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{v3 API domain}}/v3/rest/roles?fields={{roles fields}}&limit={{limit}}&offset={{offset}}&filter={{filter}}",
											"protocol": "https",
											"host": [
												"{{v3 API domain}}"
											],
											"path": [
												"v3",
												"rest",
												"roles"
											],
											"query": [
												{
													"key": "fields",
													"value": "{{roles fields}}"
												},
												{
													"key": "limit",
													"value": "{{limit}}"
												},
												{
													"key": "offset",
													"value": "{{offset}}"
												},
												{
													"key": "filter",
													"value": "{{filter}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"description": "This folder contains role requests.",
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{access_token}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "fc58a35a-e502-49a1-b75e-2ee1b8f52153",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c6c3fe2f-388a-45c8-b2a9-7e78c67e8170",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Reports",
							"item": [
								{
									"name": "Get Reports Calls",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "caa8da03-78b8-4dc0-9050-645e0669ef84",
												"exec": [
													"// set date range for last 7 days",
													"end_date = new Date();",
													"days = 86400000; // number of milliseconds in a day",
													"start_date = new Date(end_date - (7 * days));",
													"pm.variables.set(\"end_date\", end_date.toISOString().split('.')[0] + 'Z');",
													"pm.variables.set(\"start_date\", start_date.toISOString().split('.')[0] + 'Z');",
													"",
													"// FIXME - this should page of X-Total-Count",
													"pm.variables.set(\"limit\", \"500\");",
													"",
													"// members' package keys request data",
													"memberByPackageKey = {",
													"  url: 'https://' + pm.globals.get(\"v3 API domain\") + '/v3/rest/members?fields=username,packageKeys.apikey&limit=' + pm.variables.get(\"limit\"),",
													"  method: 'GET',",
													"  header: 'Authorization: Bearer ' + pm.globals.get(\"access_token\")",
													"};",
													"",
													"// request callback to associate package key to a member",
													"function mapKeysToMember (err, res) {",
													"    if (err) {",
													"        console.log(err);",
													"     } else {",
													"        var jsonData = res.json();",
													"        var headers = res.headers;",
													"        console.log(res.headers.get(\"X-Total-Count\"));",
													"        var keysToMember = {};",
													"        jsonData.forEach(function(member) {",
													"            username = member.username;",
													"            packageKeys = member.packageKeys;",
													"            for (packageKey = 0; packageKey < packageKeys.length; packageKey++) {",
													"                keysToMember[packageKeys[packageKey].apikey] = username;",
													"            }",
													"        });",
													"        pm.variables.set(\"keysToMember\", JSON.stringify(keysToMember));",
													"    }",
													"}",
													"",
													"// make a request to get package keys by member",
													"pm.sendRequest(memberByPackageKey, mapKeysToMember);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "266ecd7b-eaa4-4696-8320-c98f7e785915",
												"exec": [
													"// loop over the csv response, skip the header line",
													"var responseLines = responseBody.split('\\n');",
													"console.log(pm.variables.get(\"keysToMember\"));",
													"var keysToMember = JSON.parse(pm.variables.get(\"keysToMember\"));",
													"for (line = 1; line < responseLines.length; line++) {",
													"    if (responseLines[line].length > 1) {",
													"        packageKey = responseLines[line].split(\",\")[2]; // get the package key field",
													"        if (keysToMember[packageKey]) {",
													"            member = keysToMember[packageKey];",
													"        } else {",
													"            member = \"unknown\";",
													"        }",
													"        responseLines[line] = responseLines[line] + ',' + member; // add the member to csv line",
													"    }",
													"}",
													"",
													"// dump the amended csv that includes the developer",
													"responseLines[0] = responseLines[0] + ',member';",
													"console.log(responseLines.join('\\r\\n'));",
													"",
													"// clean-uo",
													"pm.variables.unset(\"start_date\");",
													"pm.variables.unset(\"end_date\");",
													"pm.variables.unset(\"keysToMember\");",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{v3 API domain}}/v3/rest/reports/calls/qps/developer?start_date={{start_date}}&end_date={{end_date}}&format=csv&limit={{limit}}",
											"protocol": "https",
											"host": [
												"{{v3 API domain}}"
											],
											"path": [
												"v3",
												"rest",
												"reports",
												"calls",
												"qps",
												"developer"
											],
											"query": [
												{
													"key": "start_date",
													"value": "{{start_date}}"
												},
												{
													"key": "end_date",
													"value": "{{end_date}}"
												},
												{
													"key": "format",
													"value": "csv"
												},
												{
													"key": "limit",
													"value": "{{limit}}"
												}
											]
										},
										"description": "Get request metrics by package key. Outputs as csv.\n\nThe date range is set automatically to the last 7 days."
									},
									"response": []
								},
								{
									"name": "Get Reports Calls Developer Activity For Service",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "caa8da03-78b8-4dc0-9050-645e0669ef84",
												"exec": [
													"// set date range for last 7 days",
													"end_date = new Date();",
													"days = 86400000; // number of milliseconds in a day",
													"start_date = new Date(end_date - (7 * days));",
													"pm.variables.set(\"end_date\", end_date.toISOString().split('.')[0] + 'Z');",
													"pm.variables.set(\"start_date\", start_date.toISOString().split('.')[0] + 'Z');",
													"",
													"// default for this request",
													"pm.variables.set(\"limit\", \"1000\");",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "266ecd7b-eaa4-4696-8320-c98f7e785915",
												"exec": [
													"",
													"// clean-uo",
													"pm.variables.unset(\"start_date\");",
													"pm.variables.unset(\"end_date\");",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{v3 API domain}}/v3/rest/reports/calls/developer_activity/service/{{serviceId}}?start_date={{start_date}}&end_date={{end_date}}&format=json&limit={{limit}}",
											"protocol": "https",
											"host": [
												"{{v3 API domain}}"
											],
											"path": [
												"v3",
												"rest",
												"reports",
												"calls",
												"developer_activity",
												"service",
												"{{serviceId}}"
											],
											"query": [
												{
													"key": "start_date",
													"value": "{{start_date}}"
												},
												{
													"key": "end_date",
													"value": "{{end_date}}"
												},
												{
													"key": "format",
													"value": "json"
												},
												{
													"key": "limit",
													"value": "{{limit}}"
												}
											]
										},
										"description": "Get developer activity for a service. Outputs as JSON.\n\nThe date range is set automatically to the last 7 days."
									},
									"response": []
								},
								{
									"name": "Get Reports Calls Methods Service For Developer",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "caa8da03-78b8-4dc0-9050-645e0669ef84",
												"exec": [
													"// set date range for last 7 days",
													"end_date = new Date();",
													"days = 86400000; // number of milliseconds in a day",
													"start_date = new Date(end_date - (7 * days));",
													"pm.variables.set(\"end_date\", end_date.toISOString().split('.')[0] + 'Z');",
													"pm.variables.set(\"start_date\", start_date.toISOString().split('.')[0] + 'Z');",
													"",
													"// default for this request",
													"pm.variables.set(\"limit\", \"1000\");",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "266ecd7b-eaa4-4696-8320-c98f7e785915",
												"exec": [
													"",
													"// clean-uo",
													"pm.variables.unset(\"start_date\");",
													"pm.variables.unset(\"end_date\");",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{v3 API domain}}/v3/rest/reports/calls/methods/service/{{serviceId}}/developer/{{api_key}}?start_date={{start_date}}&end_date={{end_date}}&format=json&limit={{limit}}&method_limit={{method_limit}}",
											"protocol": "https",
											"host": [
												"{{v3 API domain}}"
											],
											"path": [
												"v3",
												"rest",
												"reports",
												"calls",
												"methods",
												"service",
												"{{serviceId}}",
												"developer",
												"{{api_key}}"
											],
											"query": [
												{
													"key": "start_date",
													"value": "{{start_date}}"
												},
												{
													"key": "end_date",
													"value": "{{end_date}}"
												},
												{
													"key": "format",
													"value": "json"
												},
												{
													"key": "limit",
													"value": "{{limit}}"
												},
												{
													"key": "method_limit",
													"value": "{{method_limit}}"
												}
											]
										},
										"description": "Get request method count for service and package key. Outputs as JSON.\n\nThe date range is set automatically to the last 7 days."
									},
									"response": []
								},
								{
									"name": "Get Reports QPS Trend",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f8b7d028-c074-48a5-84e2-f768e13218c0",
												"exec": [
													"// set date range for last 7 days",
													"end_date = new Date();",
													"days = 86400000; // number of milliseconds in a day",
													"start_date = new Date(end_date - (7 * days));",
													"pm.variables.set(\"end_date\", end_date.toISOString().split('.')[0] + 'Z');",
													"pm.variables.set(\"start_date\", start_date.toISOString().split('.')[0] + 'Z');",
													"",
													"// default for this request",
													"pm.variables.set(\"limit\", \"1000\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "38eaec6e-5222-4aae-b07f-67da10d5e93b",
												"exec": [
													"// clean-uo",
													"pm.variables.unset(\"start_date\");",
													"pm.variables.unset(\"end_date\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{v3 API domain}}/v3/rest/reports/area/qps/trend?start_date={{start_date}}&end_date={{end_date}}&format=json&limit={{limit}}",
											"protocol": "https",
											"host": [
												"{{v3 API domain}}"
											],
											"path": [
												"v3",
												"rest",
												"reports",
												"area",
												"qps",
												"trend"
											],
											"query": [
												{
													"key": "start_date",
													"value": "{{start_date}}"
												},
												{
													"key": "end_date",
													"value": "{{end_date}}"
												},
												{
													"key": "format",
													"value": "json"
												},
												{
													"key": "limit",
													"value": "{{limit}}"
												}
											]
										},
										"description": "Get QPS metrics for the area. Outputs as csv.\n\nThe date range is set automatically to the last 7 days."
									},
									"response": []
								},
								{
									"name": "Get Package Keys Audit Logs",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f8b7d028-c074-48a5-84e2-f768e13218c0",
												"exec": [
													"// default for this request",
													"pm.variables.set(\"limit\", \"1000\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "38eaec6e-5222-4aae-b07f-67da10d5e93b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{v3 API domain}}/v3/rest/packageKeys/auditLogs?sort=changed_on:desc&limit={{limit}}",
											"protocol": "https",
											"host": [
												"{{v3 API domain}}"
											],
											"path": [
												"v3",
												"rest",
												"packageKeys",
												"auditLogs"
											],
											"query": [
												{
													"key": "sort",
													"value": "changed_on:desc"
												},
												{
													"key": "limit",
													"value": "{{limit}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"description": "Requests for the v3 reports API.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4ebdf37d-f9d2-4a1b-a4a4-5c70c87be00a",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b1303097-232d-44c8-9e81-35b605602ef1",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{access_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "e141b3ea-bd1a-4c21-9c1f-5b572aa9df67",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "84ea447d-6a32-4cd4-8475-de8ef9331641",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Resources - update",
					"item": [
						{
							"name": "Packages and Plans",
							"item": [
								{
									"name": "Post Package",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "081831f7-6112-42cd-a892-b7514809802b",
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"",
													"if (\"id\" in jsonData) {",
													"    pm.globals.set(\"newPackageId\", jsonData.id);",
													"    postman.setNextRequest(\"Put Package\");",
													"} else {",
													"    pm.globals.unset(\"newPackageId\");",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Postman created package\"\n}"
										},
										"url": {
											"raw": "https://{{v3 API domain}}/v3/rest/packages",
											"protocol": "https",
											"host": [
												"{{v3 API domain}}"
											],
											"path": [
												"v3",
												"rest",
												"packages"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put Package",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "081831f7-6112-42cd-a892-b7514809802b",
												"exec": [
													"postman.setNextRequest(\"Post Plan\");",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"Postman updated package\",\n    \"keyLength\": 32,\n    \"sharedSecretLength\": 16\n}"
										},
										"url": {
											"raw": "https://{{v3 API domain}}/v3/rest/packages/{{newPackageId}}",
											"protocol": "https",
											"host": [
												"{{v3 API domain}}"
											],
											"path": [
												"v3",
												"rest",
												"packages",
												"{{newPackageId}}"
											]
										},
										"description": "Set sharedSecretLength to zero to disable secrets."
									},
									"response": []
								},
								{
									"name": "Post Plan",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "19249430-e966-42d5-bd05-e5265fcccf56",
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"",
													"if (\"id\" in jsonData) {",
													"    pm.globals.set(\"newPlanId\", jsonData.id);",
													"    postman.setNextRequest(\"Put Plan\");",
													"} else {",
													"    pm.globals.unset(\"newPlanId\");",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\":\"Postman created plan\"\n}"
										},
										"url": {
											"raw": "https://{{v3 API domain}}/v3/rest/packages/{{newPackageId}}/plans",
											"protocol": "https",
											"host": [
												"{{v3 API domain}}"
											],
											"path": [
												"v3",
												"rest",
												"packages",
												"{{newPackageId}}",
												"plans"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put Plan",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "19249430-e966-42d5-bd05-e5265fcccf56",
												"exec": [
													"postman.setNextRequest(\"Post Package Key\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"Postman updated plan\",\n    \"qpsLimitCeiling\": 3,\n    \"qpsLimitKeyOverrideAllowed\": false,\n    \"rateLimitCeiling\": 6000,\n    \"rateLimitKeyOverrideAllowed\": false,\n    \"rateLimitPeriod\": \"hour\"\n}"
										},
										"url": {
											"raw": "https://{{v3 API domain}}/v3/rest/packages/{{newPackageId}}/plans/{{newPlanId}}",
											"protocol": "https",
											"host": [
												"{{v3 API domain}}"
											],
											"path": [
												"v3",
												"rest",
												"packages",
												"{{newPackageId}}",
												"plans",
												"{{newPlanId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Plan",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "19249430-e966-42d5-bd05-e5265fcccf56",
												"exec": [
													"pm.globals.unset(\"newPlanId\");",
													"postman.setNextRequest(\"Delete Package\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{v3 API domain}}/v3/rest/packages/{{newPackageId}}/plans/{{newPlanId}}",
											"protocol": "https",
											"host": [
												"{{v3 API domain}}"
											],
											"path": [
												"v3",
												"rest",
												"packages",
												"{{newPackageId}}",
												"plans",
												"{{newPlanId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Package",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "081831f7-6112-42cd-a892-b7514809802b",
												"exec": [
													"pm.globals.unset(\"newPackageId\");",
													"postman.setNextRequest(\"Delete Members Application\");",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{v3 API domain}}/v3/rest/packages/{{newPackageId}}",
											"protocol": "https",
											"host": [
												"{{v3 API domain}}"
											],
											"path": [
												"v3",
												"rest",
												"packages",
												"{{newPackageId}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Members",
							"item": [
								{
									"name": "Post Member",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "587ec4ec-7be5-4a60-87fd-62ea93507946",
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"",
													"if (\"id\" in jsonData) {",
													"    pm.globals.set(\"newMemberId\", jsonData.id);",
													"    postman.setNextRequest(\"Put Member\");",
													"} else {",
													"    pm.globals.unset(\"newMemberId\");",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n\t\"username\": \"PostmanCreatedUser{{$randomInt}}\",\n    \"displayName\": \"PostmanCreatedName{{$randomInt}}\",\n    \"email\": \"postman{{$randomInt}}@email.com\",\n    \"passwdNew\": \"P05tM@n2018\"\n}"
										},
										"url": {
											"raw": "https://{{v3 API domain}}/v3/rest/members",
											"protocol": "https",
											"host": [
												"{{v3 API domain}}"
											],
											"path": [
												"v3",
												"rest",
												"members"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put Member",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "587ec4ec-7be5-4a60-87fd-62ea93507946",
												"exec": [
													"postman.setNextRequest(\"Post Memebers Application\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n    \"areaStatus\": \"active\"\n}"
										},
										"url": {
											"raw": "https://{{v3 API domain}}/v3/rest/members/{{newMemberId}}",
											"protocol": "https",
											"host": [
												"{{v3 API domain}}"
											],
											"path": [
												"v3",
												"rest",
												"members",
												"{{newMemberId}}"
											]
										},
										"description": "If adding a member to a Portal Access Group you can use a POST body:\n\n`{\"roles\":[{\"id\":\"{{roleId}}\",\"name\":\"\"}]}`\n\nWhere roleId is the Portal Access Group identifier."
									},
									"response": []
								},
								{
									"name": "Post Members Application",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "587ec4ec-7be5-4a60-87fd-62ea93507946",
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"",
													"if (\"id\" in jsonData) {",
													"    pm.globals.set(\"newMemberApplicationId\", jsonData.id);",
													"    postman.setNextRequest(\"Put Member Application\");",
													"} else {",
													"    pm.globals.unset(\"newMemberApplicationId\");",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n    \"name\": \"New App\",\n    \"description\": \"Postman created\"\n}"
										},
										"url": {
											"raw": "https://{{v3 API domain}}/v3/rest/members/{{newMemberId}}/applications",
											"protocol": "https",
											"host": [
												"{{v3 API domain}}"
											],
											"path": [
												"v3",
												"rest",
												"members",
												"{{newMemberId}}",
												"applications"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put Members Application",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "587ec4ec-7be5-4a60-87fd-62ea93507946",
												"exec": [
													"postman.setNextRequest(\"Post Package\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n    \"description\": \"Created by Postman\"\n}"
										},
										"url": {
											"raw": "https://{{v3 API domain}}/v3/rest/members/{{newMemberId}}/applications/{{newMemberApplicationId}}",
											"protocol": "https",
											"host": [
												"{{v3 API domain}}"
											],
											"path": [
												"v3",
												"rest",
												"members",
												"{{newMemberId}}",
												"applications",
												"{{newMemberApplicationId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Members Application",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "587ec4ec-7be5-4a60-87fd-62ea93507946",
												"exec": [
													"pm.globals.unset(\"newMemberApplicationId\");",
													"postman.setNextRequest(\"Delete Member\");",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{v3 API domain}}/v3/rest/members/{{newMemberId}}/applications/{{newMemberApplicationId}}",
											"protocol": "https",
											"host": [
												"{{v3 API domain}}"
											],
											"path": [
												"v3",
												"rest",
												"members",
												"{{newMemberId}}",
												"applications",
												"{{newMemberApplicationId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Member",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "587ec4ec-7be5-4a60-87fd-62ea93507946",
												"exec": [
													"pm.globals.unset(\"newMemberId\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{v3 API domain}}/v3/rest/members/{{newMemberId}}",
											"protocol": "https",
											"host": [
												"{{v3 API domain}}"
											],
											"path": [
												"v3",
												"rest",
												"members",
												"{{newMemberId}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Package Keys",
							"item": [
								{
									"name": "Post Package Key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "587ec4ec-7be5-4a60-87fd-62ea93507946",
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"",
													"if (\"id\" in jsonData) {",
													"    pm.globals.set(\"newPackageKeyId\", jsonData.id);",
													"    postman.setNextRequest(\"Put Package Key\");",
													"} else {",
													"    pm.globals.unset(\"newPackageKeyId\");",
													"    postman.setNextRequest(\"Delete Plan\");",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n    \"package\": { \"id\": \"{{newPackageId}}\"},\n    \"plan\" : { \"id\": \"{{newPlanId}}\"}\n}"
										},
										"url": {
											"raw": "https://{{v3 API domain}}/v3/rest/applications/{{newMemberApplicationId}}/packageKeys",
											"protocol": "https",
											"host": [
												"{{v3 API domain}}"
											],
											"path": [
												"v3",
												"rest",
												"applications",
												"{{newMemberApplicationId}}",
												"packageKeys"
											]
										},
										"description": "Note, you can set a custom key name by adding apikey in the payload, e.g.:\n\n```\n\"apikey\":\"myCustomKey\"\n```"
									},
									"response": []
								},
								{
									"name": "Put Package Key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "587ec4ec-7be5-4a60-87fd-62ea93507946",
												"exec": [
													"postman.setNextRequest(\"Delete Package Key\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n\t\"status\": \"active\"\n}"
										},
										"url": {
											"raw": "https://{{v3 API domain}}/v3/rest/packageKeys/{{newPackageKeyId}}",
											"protocol": "https",
											"host": [
												"{{v3 API domain}}"
											],
											"path": [
												"v3",
												"rest",
												"packageKeys",
												"{{newPackageKeyId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Package Key",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "587ec4ec-7be5-4a60-87fd-62ea93507946",
												"exec": [
													"pm.globals.unset(\"newPackageKeyId\");",
													"postman.setNextRequest(\"Delete Plan\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{v3 API domain}}/v3/rest/packageKeys/{{newPackageKeyId}}",
											"protocol": "https",
											"host": [
												"{{v3 API domain}}"
											],
											"path": [
												"v3",
												"rest",
												"packageKeys",
												"{{newPackageKeyId}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Domains",
							"item": [
								{
									"name": "Post Domain",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4af3b7da-0546-45ff-806f-9710383376ae",
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"",
													"if (\"id\" in jsonData) {",
													"    pm.globals.set(\"domainId\", jsonData.id);",
													"    postman.setNextRequest(\"Delete Domain\");",
													"} else {",
													"    pm.globals.unset(\"domainId\");",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \"domain\": \"getpostman.com\", \"status\": \"active\" } "
										},
										"url": {
											"raw": "https://{{v3 API domain}}/v3/rest/domains",
											"protocol": "https",
											"host": [
												"{{v3 API domain}}"
											],
											"path": [
												"v3",
												"rest",
												"domains"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Domain",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4b4567fc-d887-43eb-b043-03c00bde2489",
												"exec": [
													"pm.globals.unset(\"domainId\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{v3 API domain}}/v3/rest/domains/{{domainId}}",
											"protocol": "https",
											"host": [
												"{{v3 API domain}}"
											],
											"path": [
												"v3",
												"rest",
												"domains",
												"{{domainId}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Services",
							"item": [
								{
									"name": "Transform",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f02e881a-6ca8-4ab5-9b68-d9c35f9289c0",
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"",
													"if (\"document\" in jsonData) {",
													"    var servicePostBody = '{\"endpoints\":' + JSON.stringify(jsonData.document.endpoints) + ',\"version\": \"1.0\",\"description\": \"Request echo service from Swagger.\",\"name\": \"Postman Echo Service\"}';",
													"    pm.globals.set(\"servicePostBody\", servicePostBody);",
													"} else {",
													"    pm.globals.set(\"servicePostBody\", '{\"name\": \"Postman created service\"}');",
													"}",
													"postman.setNextRequest(\"Post Service\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "",
												"value": "",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"swagger\": \"2.0\",\n  \"info\": {\n    \"title\": \"Postman Echo Service\",\n    \"description\": \"Request echo service from Swagger.\",\n    \"version\": \"1.0\"\n  },\n  \"host\": \"httpbin.org\",\n  \"basePath\": \"/echo\",\n  \"schemes\": [\n    \"https\"\n  ],\n  \"securityDefinitions\": {\n    \"auth\": {\n      \"type\": \"apiKey\",\n      \"name\": \"api_key\",\n      \"in\": \"query\"\n    }\n  },\n  \"paths\": {\n    \"/get\": {\n      \"get\": {\n        \"description\": \"Returns GET data.\",\n        \"operationId\": \"/get\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"\",\n            \"schema\": {\n              \"type\": \"object\"\n            }\n          }\n        },\n        \"security\": [\n          {\n            \"auth\": []\n          }\n        ]\n      }\n    }\n  }\n}\n"
										},
										"url": {
											"raw": "https://{{v3 API domain}}/v3/rest/transform?sourceFormat=swagger2&targetFormat=masheryapi&publicDomain={{publicEndpointDomain}}",
											"protocol": "https",
											"host": [
												"{{v3 API domain}}"
											],
											"path": [
												"v3",
												"rest",
												"transform"
											],
											"query": [
												{
													"key": "sourceFormat",
													"value": "swagger2"
												},
												{
													"key": "targetFormat",
													"value": "masheryapi"
												},
												{
													"key": "publicDomain",
													"value": "{{publicEndpointDomain}}"
												}
											]
										},
										"description": "Use sourceFormat=oas3 for OpenAPI 3."
									},
									"response": []
								},
								{
									"name": "Post Service",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f02e881a-6ca8-4ab5-9b68-d9c35f9289c0",
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"",
													"if (\"id\" in jsonData) {",
													"    pm.globals.set(\"newServiceId\", jsonData.id);",
													"    postman.setNextRequest(\"Put Service\");",
													"} else {",
													"    pm.globals.unset(\"newServiceId\");",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "",
												"value": "",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{servicePostBody}}"
										},
										"url": {
											"raw": "https://{{v3 API domain}}/v3/rest/services",
											"protocol": "https",
											"host": [
												"{{v3 API domain}}"
											],
											"path": [
												"v3",
												"rest",
												"services"
											]
										},
										"description": "Run 'Get Domains Public Hostnames' before running this."
									},
									"response": []
								},
								{
									"name": "Put Service",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f02e881a-6ca8-4ab5-9b68-d9c35f9289c0",
												"exec": [
													"postman.setNextRequest(\"Post Organization\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "",
												"value": "",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"description\": \"Postman updated service\"\n}"
										},
										"url": {
											"raw": "https://{{v3 API domain}}/v3/rest/services/{{newServiceId}}",
											"protocol": "https",
											"host": [
												"{{v3 API domain}}"
											],
											"path": [
												"v3",
												"rest",
												"services",
												"{{newServiceId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post Organization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "087bb15d-a9b8-4980-8657-b67f80fbeeac",
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"",
													"if (\"id\" in jsonData) {",
													"    pm.globals.set(\"organizationId\", jsonData.id);",
													"    postman.setNextRequest(\"Put Service Organization\");",
													"} else {",
													"    pm.globals.unset(\"organizationId\");",
													"    postman.setNextRequest(\"Post Endpoint\");",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"name\":\"Postman\",\"description\":\"Postman created\",\"parent\":\"\"}"
										},
										"url": {
											"raw": "https://{{v3 API domain}}/v3/rest/organizations",
											"protocol": "https",
											"host": [
												"{{v3 API domain}}"
											],
											"path": [
												"v3",
												"rest",
												"organizations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put Service Organization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f02e881a-6ca8-4ab5-9b68-d9c35f9289c0",
												"exec": [
													"postman.setNextRequest(\"Post Service Roles\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "",
												"value": "",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"organization\": {\n    \"id\": \"{{organizationId}}\"\n  }\n}"
										},
										"url": {
											"raw": "https://{{v3 API domain}}/v3/rest/services/{{newServiceId}}",
											"protocol": "https",
											"host": [
												"{{v3 API domain}}"
											],
											"path": [
												"v3",
												"rest",
												"services",
												"{{newServiceId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put Service Roles",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f02e881a-6ca8-4ab5-9b68-d9c35f9289c0",
												"exec": [
													"postman.setNextRequest(\"Post Endpoint\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "",
												"value": "",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"roles\": [\n        {\n            \"name\": \"\",\n            \"id\": \"{{serviceRoleId}}\",\n            \"action\": \"read\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "https://{{v3 API domain}}/v3/rest/services/{{newServiceId}}",
											"protocol": "https",
											"host": [
												"{{v3 API domain}}"
											],
											"path": [
												"v3",
												"rest",
												"services",
												"{{newServiceId}}"
											]
										},
										"description": "Set the roles that have access to the service's interactive documentation in the portal. To delete all roles, send an empty roles array."
									},
									"response": []
								},
								{
									"name": "Post Endpoint",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f02e881a-6ca8-4ab5-9b68-d9c35f9289c0",
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"",
													"if (\"id\" in jsonData) {",
													"    pm.globals.set(\"newEndpointId\", jsonData.id);",
													"    postman.setNextRequest(\"Put Endpoint\");",
													"} else {",
													"    pm.globals.unset(\"newEndpointId\");",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "",
												"value": "",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Postman created endpoint\",\n\t\"systemDomains\": [{\"address\": \"integration.cloud.tibcoapps.com\"}],\n\t\"requestPathAlias\": \"/{path}\",\n\t\"outboundRequestTargetPath\": \"/{path}\"\n}"
										},
										"url": {
											"raw": "https://{{v3 API domain}}/v3/rest/services/{{newServiceId}}/endpoints",
											"protocol": "https",
											"host": [
												"{{v3 API domain}}"
											],
											"path": [
												"v3",
												"rest",
												"services",
												"{{newServiceId}}",
												"endpoints"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put Endpoint",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f02e881a-6ca8-4ab5-9b68-d9c35f9289c0",
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"",
													"if (\"id\" in jsonData) {",
													"    pm.variables.set(\"newEndpointId\", jsonData.id);",
													"    postman.setNextRequest(\"Post Method\");",
													"} else {",
													"    pm.variables.unset(\"newEndpointId\");",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "",
												"value": "",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Postman updated endpoint\",\n\t\"systemDomains\":[{\"address\":\"httpbin.org\"},{\"address\":\"postman-echo.com\"}]\n}"
										},
										"url": {
											"raw": "https://{{v3 API domain}}/v3/rest/services/{{newServiceId}}/endpoints/{{newEndpointId}}",
											"protocol": "https",
											"host": [
												"{{v3 API domain}}"
											],
											"path": [
												"v3",
												"rest",
												"services",
												"{{newServiceId}}",
												"endpoints",
												"{{newEndpointId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post Method",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f02e881a-6ca8-4ab5-9b68-d9c35f9289c0",
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"",
													"if (\"id\" in jsonData) {",
													"    pm.globals.set(\"newMethodId\", jsonData.id);",
													"    postman.setNextRequest(\"Put Method\");",
													"} else {",
													"    pm.globals.unset(\"newMethoId\");",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "",
												"value": "",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Postman created method\",\n\t\"sampleJsonResponse\": \"{\\\"Postman\\\": true}\"\n}"
										},
										"url": {
											"raw": "https://{{v3 API domain}}/v3/rest/services/{{newServiceId}}/endpoints/{{newEndpointId}}/methods",
											"protocol": "https",
											"host": [
												"{{v3 API domain}}"
											],
											"path": [
												"v3",
												"rest",
												"services",
												"{{newServiceId}}",
												"endpoints",
												"{{newEndpointId}}",
												"methods"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put Method",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f02e881a-6ca8-4ab5-9b68-d9c35f9289c0",
												"exec": [
													"postman.setNextRequest(\"Post Response Filter\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "",
												"value": "",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Postman created method\",\n\t\"sampleJsonResponse\": \"{\\\"Postman\\\": true, \\\"updated\\\": true}\"\n}"
										},
										"url": {
											"raw": "https://{{v3 API domain}}/v3/rest/services/{{newServiceId}}/endpoints/{{newEndpointId}}/methods/{{newMethodId}}",
											"protocol": "https",
											"host": [
												"{{v3 API domain}}"
											],
											"path": [
												"v3",
												"rest",
												"services",
												"{{newServiceId}}",
												"endpoints",
												"{{newEndpointId}}",
												"methods",
												"{{newMethodId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post Response Filter",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f02e881a-6ca8-4ab5-9b68-d9c35f9289c0",
												"exec": [
													"postman.setNextRequest(\"Post IO Docs\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "",
												"value": "",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Postman created response filter\",\n\t\"jsonFilterFields\": \"/updated\"\n}"
										},
										"url": {
											"raw": "https://{{v3 API domain}}/v3/rest/services/{{newServiceId}}/endpoints/{{newEndpointId}}/methods/{{newMethodId}}/responseFilters",
											"protocol": "https",
											"host": [
												"{{v3 API domain}}"
											],
											"path": [
												"v3",
												"rest",
												"services",
												"{{newServiceId}}",
												"endpoints",
												"{{newEndpointId}}",
												"methods",
												"{{newMethodId}}",
												"responseFilters"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post IO Docs",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f02e881a-6ca8-4ab5-9b68-d9c35f9289c0",
												"exec": [
													"postman.setNextRequest(\"Put IO Docs\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "",
												"value": "",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"serviceId\": \"{{newServiceId}}\",\n  \"definition\": {\n    \"name\": \"Postman\",\n    \"title\": \"Postman created\",\n    \"description\": \"Postman created IO Docs\",\n    \"version\": \"20\",\n    \"protocol\": \"rest\",\n    \"basePath\": \"\",\n    \"auth\": {\n      \"key\": {\n        \"param\": \"api_key\",\n        \"location\": \"query\"\n      }\n    },\n    \"resources\": {\n      \"Account\": {\n        \"methods\": {\n          \"exampleMethod\": {\n            \"description\": \"\",\n            \"httpMethod\": \"GET\",\n            \"path\": \"\",\n            \"parameters\": {\n              \"exampleParameter\": {\n                \"description\": \"\",\n                \"default\": \"\",\n                \"required\": true,\n                \"location\": \"query\"\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"defaultApi\": false\n}"
										},
										"url": {
											"raw": "https://{{v3 API domain}}/v3/rest/iodocs/services",
											"protocol": "https",
											"host": [
												"{{v3 API domain}}"
											],
											"path": [
												"v3",
												"rest",
												"iodocs",
												"services"
											]
										}
									},
									"response": []
								},
								{
									"name": "Put IO Docs",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f02e881a-6ca8-4ab5-9b68-d9c35f9289c0",
												"exec": [
													"postman.setNextRequest(\"Delete IO Docs\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "",
												"value": "",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"serviceId\": \"{{newServiceId}}\",\n  \"definition\": {\n    \"name\": \"Postman\",\n    \"title\": \"Postman updated\",\n    \"description\": \"Postman updated IO Docs\",\n    \"version\": \"20\",\n    \"protocol\": \"rest\",\n    \"basePath\": \"\",\n    \"auth\": {\n      \"key\": {\n        \"param\": \"api_key\",\n        \"location\": \"query\"\n      }\n    },\n    \"resources\": {\n      \"Account\": {\n        \"methods\": {\n          \"exampleMethod\": {\n            \"description\": \"\",\n            \"httpMethod\": \"GET\",\n            \"path\": \"\",\n            \"parameters\": {\n              \"exampleParameter\": {\n                \"description\": \"\",\n                \"default\": \"\",\n                \"required\": true,\n                \"location\": \"query\"\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  \"defaultApi\": false\n}"
										},
										"url": {
											"raw": "https://{{v3 API domain}}/v3/rest/iodocs/services/{{newServiceId}}",
											"protocol": "https",
											"host": [
												"{{v3 API domain}}"
											],
											"path": [
												"v3",
												"rest",
												"iodocs",
												"services",
												"{{newServiceId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete IO Docs",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f02e881a-6ca8-4ab5-9b68-d9c35f9289c0",
												"exec": [
													"postman.setNextRequest(\"Post Swagger\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "",
												"value": "",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{v3 API domain}}/v3/rest/iodocs/services/{{newServiceId}}",
											"protocol": "https",
											"host": [
												"{{v3 API domain}}"
											],
											"path": [
												"v3",
												"rest",
												"iodocs",
												"services",
												"{{newServiceId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post Swagger",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f02e881a-6ca8-4ab5-9b68-d9c35f9289c0",
												"exec": [
													"postman.setNextRequest(\"Delete Swagger\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "",
												"value": "",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"serviceId\": \"{{newServiceId}}\",\n  \"docType\": \"SWAGGER\",\n  \"definition\": {\n    \"swagger\": \"2.0\",\n    \"info\": {\n      \"title\": \"Postman created Swagger\",\n      \"description\": \"Postman created Swagger.\",\n      \"version\": \"1.0\"\n    },\n    \"host\": \"api.mashery.com\",\n    \"basePath\": \"/echo\",\n    \"schemes\": [\n      \"https\"\n    ],\n    \"securityDefinitions\": {\n      \"auth\": {\n        \"type\": \"apiKey\",\n        \"name\": \"api_key\",\n        \"in\": \"query\"\n      }\n    },\n    \"paths\": {\n      \"/get\": {\n        \"get\": {\n          \"description\": \"Returns GET data.\",\n          \"operationId\": \"/get\",\n          \"responses\": {\n            \"200\": {\n              \"description\": \"\",\n              \"schema\": {\n                \"type\": \"object\"\n              }\n            }\n          },\n          \"security\": [\n            {\n              \"auth\": []\n            }\n          ]\n        }\n      }\n    }\n  }\n}"
										},
										"url": {
											"raw": "https://{{v3 API domain}}/v3/rest/services/docs",
											"protocol": "https",
											"host": [
												"{{v3 API domain}}"
											],
											"path": [
												"v3",
												"rest",
												"services",
												"docs"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Swagger",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f02e881a-6ca8-4ab5-9b68-d9c35f9289c0",
												"exec": [
													"postman.setNextRequest(\"Delete Service\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "",
												"value": "",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{v3 API domain}}/v3/rest/services/docs/{{newServiceId}}",
											"protocol": "https",
											"host": [
												"{{v3 API domain}}"
											],
											"path": [
												"v3",
												"rest",
												"services",
												"docs",
												"{{newServiceId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Service",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f02e881a-6ca8-4ab5-9b68-d9c35f9289c0",
												"exec": [
													"pm.globals.unset(\"newServiceId\");",
													"pm.globals.unset(\"newEndpointId\");",
													"pm.globals.unset(\"newMethodId\");",
													"pm.globals.unset(\"servicePostBody\");",
													"pm.globals.unset(\"publicEndpointDomain\");",
													"",
													"postman.setNextRequest(\"Delete Organization\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "65598a49-9af9-4927-a784-9baf6f2364e3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "",
												"value": "",
												"disabled": true
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{v3 API domain}}/v3/rest/services/{{newServiceId}}",
											"protocol": "https",
											"host": [
												"{{v3 API domain}}"
											],
											"path": [
												"v3",
												"rest",
												"services",
												"{{newServiceId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Organization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "087bb15d-a9b8-4980-8657-b67f80fbeeac",
												"exec": [
													"pm.globals.unset(\"organizationId\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{v3 API domain}}/v3/rest/organizations/{{organizationId}}",
											"protocol": "https",
											"host": [
												"{{v3 API domain}}"
											],
											"path": [
												"v3",
												"rest",
												"organizations",
												"{{organizationId}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "In the requests below, 'Transform' converts Swagger to a payload suitable for the subsequent 'Post Service' that creates a new service. Note, you do need to extract that payload from the 'document' object, you cannot post the output from 'Transform' directly.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e27b1302-7dde-4540-81c0-3e77cc95428c",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2398a56d-db7d-4cf3-930c-b641a495736a",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Scheduled Maintenance Events",
							"item": [
								{
									"name": "Post Scheduled Maintenance Event",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bafc8177-64b5-4544-b68b-7ec5d983aeae",
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"",
													"if (\"id\" in jsonData) {",
													"    pm.globals.set(\"scheduledMaintenanceEventsId\", jsonData.id);",
													"    postman.setNextRequest(\"Delete Scheduled Maintenance Event\");",
													"}",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"startDateTime\": \"2019-06-02T07:11:31.000+0000\",\n    \"name\": \"Next year\",\n    \"endDateTime\": \"2019-06-22T18:12:17.000+0000\"\n }"
										},
										"url": {
											"raw": "https://{{v3 API domain}}/v3/rest/scheduledMaintenanceEvents",
											"protocol": "https",
											"host": [
												"{{v3 API domain}}"
											],
											"path": [
												"v3",
												"rest",
												"scheduledMaintenanceEvents"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Scheduled Maintenance Event",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "468ecd3d-e51b-46ca-a3f0-8a2bbae4add5",
												"exec": [
													"pm.globals.unset(\"scheduledMaintenanceEventsId\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{v3 API domain}}/v3/rest/scheduledMaintenanceEvents/{{scheduledMaintenanceEventsId}}",
											"protocol": "https",
											"host": [
												"{{v3 API domain}}"
											],
											"path": [
												"v3",
												"rest",
												"scheduledMaintenanceEvents",
												"{{scheduledMaintenanceEventsId}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Roles",
							"item": [
								{
									"name": "Post Role",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "087bb15d-a9b8-4980-8657-b67f80fbeeac",
												"exec": [
													"var jsonData = JSON.parse(responseBody);",
													"",
													"if (\"id\" in jsonData) {",
													"    pm.globals.set(\"roleId\", jsonData.id);",
													"    postman.setNextRequest(\"Put Role\");",
													"} else {",
													"    pm.globals.unset(\"roleId\");",
													"    postman.setNextRequest(\"Get Roles\");",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Postman\"\n}"
										},
										"url": {
											"raw": "https://{{v3 API domain}}/v3/rest/roles",
											"protocol": "https",
											"host": [
												"{{v3 API domain}}"
											],
											"path": [
												"v3",
												"rest",
												"roles"
											]
										},
										"description": "Creates a Portal Access Group."
									},
									"response": []
								},
								{
									"name": "Put Role",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "087bb15d-a9b8-4980-8657-b67f80fbeeac",
												"exec": [
													"postman.setNextRequest(\"Delete Role\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Postman updated\"\n}"
										},
										"url": {
											"raw": "https://{{v3 API domain}}/v3/rest/roles/{{roleId}}",
											"protocol": "https",
											"host": [
												"{{v3 API domain}}"
											],
											"path": [
												"v3",
												"rest",
												"roles",
												"{{roleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Role",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "087bb15d-a9b8-4980-8657-b67f80fbeeac",
												"exec": [
													"pm.globals.unset(\"roleId\");",
													"postman.setNextRequest(\"Get Roles\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{v3 API domain}}/v3/rest/roles/{{roleId}}",
											"protocol": "https",
											"host": [
												"{{v3 API domain}}"
											],
											"path": [
												"v3",
												"rest",
												"roles",
												"{{roleId}}"
											]
										}
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"description": "These requests create, update and delete resources.\n\n**Important:** Be sure to check the request before executing.",
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{access_token}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "0254d9f6-70c9-43c7-bc73-9490ae51c758",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6bc6a32a-b1fc-41df-b513-262b77da7328",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "eb2bf109-2ce3-4bde-895d-1f02a1a066d5",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "51330547-3e74-431a-852c-a10316cc83d8",
						"type": "text/javascript",
						"exec": [
							"if (responseBody && postman.getResponseHeader(\"Content-Type\").indexOf(\"json\") > -1) {",
							"    if (pm.variables.get(\"logResponseCSV\") == \"true\") {",
							"        console.log(jsonToCsv(responseBody,pm.variables.get(\"logResponseCSVQuote\"),pm.variables.get(\"logResponseCSVHeader\")));",
							"    }",
							"    console.log(responseBody);",
							"}",
							"",
							"function jsonToCsv(objArray, isQuoted, hasHeader) {",
							"  var array = typeof objArray != 'object' ? JSON.parse(objArray) : objArray;",
							"  var line = '';",
							"  var result = '';",
							"  var columns = [];",
							"  var quoted = isQuoted;",
							"  var header = hasHeader;",
							"  var head = array[0];",
							"",
							"  var column = 0;",
							"  for (var key in array[0]) {",
							"    var keyString = key + \"\";",
							"    if (quoted) {",
							"      keyString = '\"' + keyString.replace(/\"/g, '\"\"') + '\",';",
							"    } else {",
							"      keyString = key + ',';",
							"    }",
							"    columns[column] = key;",
							"    line += keyString;",
							"    column++;",
							"  }",
							"",
							"  if (header) {",
							"    line = line.slice(0, -1);",
							"    result += line + '\\r\\n';",
							"  }",
							"",
							"  for (var row = 0; row < array.length; row++) {",
							"    line = '';",
							"    var valueString = '';",
							"    for (column = 0; column < columns.length; column++) {",
							"      var value = array[row][columns[column]];",
							"      if (typeof value === 'object') {",
							"        value = JSON.stringify(value);",
							"      } else if (typeof value != 'string') {",
							"        value = String(value);",
							"      }",
							"      valueString = quoted ? value + \"\" : value + ',';",
							"      if (quoted) {",
							"        line += '\"' + valueString.replace(/\"/g, '\"\"') + '\",';",
							"      } else {",
							"        line += valueString;",
							"      }",
							"    }",
							"",
							"    line = line.slice(0, -1);",
							"    result += line + '\\r\\n';",
							"  }",
							"  return result;",
							"",
							"}"
						]
					}
				}
			]
		},
		{
			"name": "v2",
			"item": [
				{
					"name": "Examples",
					"item": [
						{
							"name": "Object.Query - get package keys waiting for approval",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "35af33d9-89bd-4e43-9f6c-a43cbc911226",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"method\":\"object.query\",\n\"params\":[\"select * from package_keys where status='waiting'\"],\n\"id\":1}"
								},
								"url": {
									"raw": "http://{{v2 API domain}}/v2/json-rpc/{{site id}}?apikey={{v3 API key}}&sig={{sig}}",
									"protocol": "http",
									"host": [
										"{{v2 API domain}}"
									],
									"path": [
										"v2",
										"json-rpc",
										"{{site id}}"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{v3 API key}}"
										},
										{
											"key": "sig",
											"value": "{{sig}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Object.Query - get package keys created within a given time period",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "35af33d9-89bd-4e43-9f6c-a43cbc911226",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"method\":\"object.query\",\n\"params\":[\"select * from package_keys where created > '2018-10-01' and created < '2018-10-10'\"],\n\"id\":1}"
								},
								"url": {
									"raw": "http://{{v2 API domain}}/v2/json-rpc/{{site id}}?apikey={{v3 API key}}&sig={{sig}}",
									"protocol": "http",
									"host": [
										"{{v2 API domain}}"
									],
									"path": [
										"v2",
										"json-rpc",
										"{{site id}}"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{v3 API key}}"
										},
										{
											"key": "sig",
											"value": "{{sig}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Object.Query - get package keys approved in a given timeframe",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "35af33d9-89bd-4e43-9f6c-a43cbc911226",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"method\":\"object.query\",\n\"params\":[\"select * from package_keys where status = 'active' and updated > '2018-10-01' and updated < '2018-10-10'\"],\n\"id\":1}"
								},
								"url": {
									"raw": "http://{{v2 API domain}}/v2/json-rpc/{{site id}}?apikey={{v3 API key}}&sig={{sig}}",
									"protocol": "http",
									"host": [
										"{{v2 API domain}}"
									],
									"path": [
										"v2",
										"json-rpc",
										"{{site id}}"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{v3 API key}}"
										},
										{
											"key": "sig",
											"value": "{{sig}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Object.Query - get package keys rejected in a given timeframe",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "35af33d9-89bd-4e43-9f6c-a43cbc911226",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"method\":\"object.query\",\n\"params\":[\"select * from package_keys where status = 'disabled' and updated > '2018-10-01' and updated < '2018-10-10'\"],\n\"id\":1}"
								},
								"url": {
									"raw": "http://{{v2 API domain}}/v2/json-rpc/{{site id}}?apikey={{v3 API key}}&sig={{sig}}",
									"protocol": "http",
									"host": [
										"{{v2 API domain}}"
									],
									"path": [
										"v2",
										"json-rpc",
										"{{site id}}"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{v3 API key}}"
										},
										{
											"key": "sig",
											"value": "{{sig}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Object Query - get package keys with owner Information",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "35af33d9-89bd-4e43-9f6c-a43cbc911226",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"method\":\"object.query\",\n\"params\":[\"select * from package_keys where status='active'\"],\n\"id\":1}"
								},
								"url": {
									"raw": "http://{{v2 API domain}}/v2/json-rpc/{{site id}}?apikey={{v3 API key}}&sig={{sig}}",
									"protocol": "http",
									"host": [
										"{{v2 API domain}}"
									],
									"path": [
										"v2",
										"json-rpc",
										"{{site id}}"
									],
									"query": [
										{
											"key": "apikey",
											"value": "{{v3 API key}}"
										},
										{
											"key": "sig",
											"value": "{{sig}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Object Query",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "35af33d9-89bd-4e43-9f6c-a43cbc911226",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"method\":\"object.query\",\n\"params\":[\"{{v2 object query}}\"],\n\"id\":1}\n"
						},
						"url": {
							"raw": "http://{{v2 API domain}}/v2/json-rpc/{{site id}}?apikey={{v3 API key}}&sig={{sig}}",
							"protocol": "http",
							"host": [
								"{{v2 API domain}}"
							],
							"path": [
								"v2",
								"json-rpc",
								"{{site id}}"
							],
							"query": [
								{
									"key": "apikey",
									"value": "{{v3 API key}}"
								},
								{
									"key": "sig",
									"value": "{{sig}}"
								}
							]
						},
						"description": "Set your object query in the environment variable 'v2 object query', e.g. select * from package_keys where status='active'."
					},
					"response": []
				}
			],
			"description": "This folder contains useful requests that return data filtered by date/time. This type of filtering is not available in the v3 API.\n\nThe signature is generated automatically for each request.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "54e6c12b-05ac-449d-a2b3-4bda2a489d27",
						"type": "text/javascript",
						"exec": [
							"// Access your env variables like this",
							"var key = pm.globals.get(\"v3 API key\");",
							"var secret = pm.globals.get(\"v3 API secret\");",
							"console.log(\"key is \" + key);",
							"console.log(\"secret is \"+ secret);",
							"",
							"const now = new Date();",
							"var t = now.getTime().toString();",
							"t = t.substring(0,10);",
							"",
							"var sig = CryptoJS.MD5(key + secret + t).toString();",
							"",
							"// Set the new environment variable",
							"pm.globals.set(\"sig\", sig);"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "447e707e-6dfe-4f36-9187-09b8ce0ef7b9",
						"type": "text/javascript",
						"exec": [
							"if (pm.variables.get(\"logResponseCSV\") == \"true\") {",
							"    console.log(jsonToCsv(responseBody,pm.variables.get(\"logResponseCSVQuote\"),pm.variables.get(\"logResponseCSVHeader\")));",
							"}",
							"console.log(responseBody);",
							"",
							"function jsonToCsv(responseBody, isQuoted, hasHeader) {",
							"  var body = JSON.parse(responseBody);",
							"  if ('result' in body) {",
							"     if (typeof body.result !== \"boolean\" && 'items' in body.result) {",
							"      var array = body.result.items;",
							"      var line = '';",
							"      var result = '';",
							"      var columns = [];",
							"      var quoted = isQuoted;",
							"      var header = hasHeader;",
							"      var head = array[0];",
							"    ",
							"      var column = 0;",
							"      for (var key in array[0]) {",
							"        var keyString = key + \"\";",
							"        if (quoted) {",
							"          keyString = '\"' + keyString.replace(/\"/g, '\"\"') + '\",';",
							"        } else {",
							"          keyString = key + ',';",
							"        }",
							"        columns[column] = key;",
							"        line += keyString;",
							"        column++;",
							"      }",
							"    ",
							"      if (header) {",
							"        line = line.slice(0, -1);",
							"        result += line + '\\r\\n';",
							"      }",
							"    ",
							"      for (var row = 0; row < array.length; row++) {",
							"        line = '';",
							"        var valueString = '';",
							"        for (column = 0; column < columns.length; column++) {",
							"          var value = array[row][columns[column]];",
							"          if (typeof value === 'object') {",
							"            value = JSON.stringify(value);",
							"          } else if (typeof value != 'string') {",
							"            value = String(value);",
							"          }",
							"          valueString = quoted ? value + \"\" : value + ',';",
							"          if (quoted) {",
							"            line += '\"' + valueString.replace(/\"/g, '\"\"') + '\",';",
							"          } else {",
							"            line += valueString;",
							"          }",
							"        }",
							"    ",
							"        line = line.slice(0, -1);",
							"        result += line + '\\r\\n';",
							"      }",
							"      return result;",
							"     }",
							"  } else {",
							"    return \"No items for CSV\";",
							"  }",
							"}"
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "e351c126-1f97-4cf7-8a04-d2ed95f28d77",
				"type": "text/javascript",
				"exec": [
					"postman.setNextRequest(\"Get Token\");"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "28e70353-9fa4-4198-92e4-429f1f145d90",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "ed1c8074-79af-42f1-b3b7-0f5721e5bfc9",
			"key": "limit",
			"value": "100",
			"type": "string"
		},
		{
			"id": "49a8a055-5c13-4cf3-8613-9d2d9a2f1efe",
			"key": "method_limit",
			"value": "100",
			"type": "string"
		},
		{
			"id": "fde858b8-9cb9-4296-9f57-9d5472e625e0",
			"key": "offset",
			"value": "0",
			"type": "string"
		},
		{
			"id": "d35e2bc3-b06f-4de6-aad0-4672f02259dd",
			"key": "filter",
			"value": "",
			"type": "string"
		},
		{
			"id": "40f9df36-fbeb-4af6-823e-0c4fd8cceb8d",
			"key": "v2 object query",
			"value": "",
			"type": "string"
		},
		{
			"id": "e8ec3a83-77d3-4a90-8ee8-5e3b0d362a19",
			"key": "logResponseCSV",
			"value": "true",
			"type": "string"
		},
		{
			"id": "8a1e52c6-ac08-4a7b-ac62-ae072397101e",
			"key": "logResponseCSVHeader",
			"value": "true",
			"type": "string"
		},
		{
			"id": "6471ae9b-2afb-49aa-8774-209f032eaa4e",
			"key": "logResponseCSVQuote",
			"value": "true",
			"type": "string"
		},
		{
			"id": "90dc6d9b-e6f0-44d8-8dd6-48840bbfe446",
			"key": "application fields",
			"value": "id,created,updated,username,name,description,type,commercial,ads,adsSystem,usageModel,tags,notes,howDidYouHear,preferredProtocol,preferredOutput,externalId,uri,status,isPackaged,oauthRedirectUri",
			"type": "string"
		},
		{
			"id": "f94a0513-4284-4977-b3e8-f446dd12b90e",
			"key": "application package keys",
			"value": "id,package,plan,*",
			"type": "string"
		},
		{
			"id": "4e2b3c8a-812e-4d0e-88a0-42c251ba9540",
			"key": "cors fields",
			"value": "allDomainsEnabled, cookiesAllowed, domainsAllowed, headersAllowed, headersExposed,  maxAge, subDomainMatchingAllowed",
			"type": "string"
		},
		{
			"id": "b837eab5-b550-4399-982d-4bf529d55598",
			"key": "domains fields",
			"value": "id,created,domain,status",
			"type": "string"
		},
		{
			"id": "0b73b61d-a66a-4c57-907b-335e63271580",
			"key": "endpoint cache fields",
			"value": "name,id,cache",
			"type": "string"
		},
		{
			"id": "a57f8c29-ac82-4682-8fa1-b39dc6540772",
			"key": "endpoints fields",
			"value": "allowMissingApiKey,apiKeyValueLocationKey,apiKeyValueLocations,apiMethodDetectionKey,apiMethodDetectionLocations,cache,connectionTimeoutForSystemDomainRequest,connectionTimeoutForSystemDomainResponse,cookiesDuringHttpRedirectsEnabled,cors,created,customRequestAuthenticationAdapter,dropApiKeyFromIncomingCall,forceGzipOfBackendCall,forwardedHeaders,gzipPassthroughSupportEnabled,headersToExcludeFromIncomingCall,highSecurity,hostPassthroughIncludedInBackendCallHeader,id,inboundSslRequired,jsonpCallbackParameter,jsonpCallbackParameterValue,methods,methods.responseFilters,name,numberOfHttpRedirectsToFollow,oauthGrantTypes,outboundRequestTargetPath,outboundRequestTargetQueryParameters,outboundTransportProtocol,processor,publicDomains,requestAuthenticationType,requestPathAlias,requestProtocol,returnedHeaders,scheduledMaintenanceEvent,stringsToTrimFromApiKey,supportedHttpMethods,systemDomainAuthentication,systemDomains,trafficManagerDomain,updated,useSystemDomainCredential",
			"type": "string"
		},
		{
			"id": "f78bbbb6-ca09-4da7-bf73-183bf7751331",
			"key": "error messages fields",
			"value": "errorMessages.code,errorMessages.status,errorMessages.detailHeader,errorMessages.responseBody",
			"type": "string"
		},
		{
			"id": "a52a03a1-1c81-4505-bca4-c9cd9d4efbfb",
			"key": "error sets fields",
			"value": "errorSets",
			"type": "string"
		},
		{
			"id": "4ddfa518-731a-4670-88e2-bbe85b4edc67",
			"key": "iodocs fields",
			"value": "definition,createad,ServiceId,defaultApi",
			"type": "string"
		},
		{
			"id": "87ed9bd8-89c7-487d-9e45-4f2b0c15b6c7",
			"key": "member applications fields",
			"value": "id,created,updated,username,name,description,type,commercial,ads,adsSystem,usageModel,tags,notes,howDidYouHear,preferredProtocol,preferredOutput,externalId,uri,status,isPackaged,oauthRedirectUri",
			"type": "string"
		},
		{
			"id": "fab19979-9afd-4a7f-a151-1f3b39ef0ec9",
			"key": "members fields",
			"value": "id,username,created,updated,email,displayName,uri,blog,im,imsvc,phone,company,address1, address2,locality,region,postalCode,countryCode,firstName, lastName,registrationIpaddr, areaStatus,externalId,passwdNew,applications,packageKeys,roles",
			"type": "string"
		},
		{
			"id": "04d8b115-da24-4a60-862c-1b3bfb115633",
			"key": "methods fields",
			"value": "id,name,created,updated,sampleJsonResponse,sampleXmlResponse",
			"type": "string"
		},
		{
			"id": "5a582def-34a2-43b9-860f-a280368daab4",
			"key": "package fields",
			"value": "id,name,created,updated,organization,description,notifyDeveloperPeriod,notifyDeveloperNearQuota,notifyDeveloperOverQuota,notifyDeveloperOverThrottle,notifyAdminPeriod,notifyAdminNearQuota,notifyAdminOverQuota,notifyAdminOverThrottle,notifyAdminEmails,nearQuotaThreshold,eav,keyAdapter,keyLength,sharedSecretLength,plans.id,plans.created,plans.updated,plans.name,plans.description,plans.selfServiceKeyProvisioningEnabled,plans.adminKeyProvisioningEnabled,plans.notes,plans.maxNumKeysAllowed,plans.numKeysBeforeReview,plans.qpsLimitCeiling,plans.qpsLimitExempt,plans.qpsLimitKeyOverrideAllowed,plans.rateLimitCeiling, plans.rateLimitExempt, plans.rateLimitKeyOverrideAllowed, plans.rateLimitPeriod,plans.responseFilterOverrideAllowed, plans.status, plans.emailTemplateSetId",
			"type": "string"
		},
		{
			"id": "52724d84-3b49-4ccd-adb8-83c94d88a588",
			"key": "package keys fields",
			"value": "id,apikey,secret,created,updated,rateLimitCeiling,rateLimitExempt,qpsLimitCeiling,qpsLimitExempt,status,limits,package.name,plan.name,application.name",
			"type": "string"
		},
		{
			"id": "b99b008a-d5c7-4044-a271-b5877e8b3149",
			"key": "plan fields",
			"value": "id,name,created,updated,description,eav,selfServiceKeyProvisioningEnabled,adminKeyProvisioningEnabled,notes,maxNumKeysAllowed,numKeysBeforeReview,qpsLimitCeiling,qpsLimitExempt,qpsLimitKeyOverrideAllowed,rateLimitCeiling,rateLimitExempt,rateLimitKeyOverrideAllowed,rateLimitPeriod,responseFilterOverrideAllowed,status,emailTemplateSetId,services",
			"type": "string"
		},
		{
			"id": "d6c40f5f-98e6-42cb-899b-d02c0b2aa4c1",
			"key": "plan services fields",
			"value": "id,name,endpoints.id,endpoints.name,endpoints.methods.id,endpoints.methods.name,created,updated",
			"type": "string"
		},
		{
			"id": "b047e16c-45ff-42b7-8a58-98cf11bc0b98",
			"key": "public domains fields",
			"value": "id,method,name,path,domain,created,updated",
			"type": "string"
		},
		{
			"id": "7bd119f6-ea70-40af-b386-aaf336e2dbdc",
			"key": "public hostnames fields",
			"value": "address",
			"type": "string"
		},
		{
			"id": "08d5ca8c-7344-4cd3-a388-7f4a1b51d6b1",
			"key": "response filters fields",
			"value": "id,name,created,updated,notes,xmlFilterFields,jsonFilterFields",
			"type": "string"
		},
		{
			"id": "273fb5ef-9a34-46f4-8a58-859253dc5865",
			"key": "roles fields",
			"value": "id,name,created,updated",
			"type": "string"
		},
		{
			"id": "5a55a644-3680-4bac-bf8a-f7ef1ac397c9",
			"key": "scheduled maintenance event fields",
			"value": "id,name,startDateTime,endDateTime,endpoints",
			"type": "string"
		},
		{
			"id": "e0308d8f-51f5-4bf3-9b88-00070129777b",
			"key": "security profile fields",
			"value": "securityProfile",
			"type": "string"
		},
		{
			"id": "820164df-68e0-4a07-bee7-f772dd496764",
			"key": "service fields",
			"value": "cache,created,crossdomainPolicy,description,editorHandle,endpoints.allowMissingApiKey,endpoints.apiKeyValueLocationKey,endpoints.apiKeyValueLocations,endpoints.apiMethodDetectionKey,endpoints.apiMethodDetectionLocations,endpoints.cache.clientSurrogateControlEnabled,endpoints.cache.contentCacheKeyHeaders,endpoints.connectionTimeoutForSystemDomainRequest,endpoints.connectionTimeoutForSystemDomainResponse,endpoints.cookiesDuringHttpRedirectsEnabled,endpoints.cors,endpoints.cors.allDomainsEnabled,endpoints.cors.maxAge,endpoints.customRequestAuthenticationAdapter,endpoints.dropApiKeyFromIncomingCall,endpoints.forceGzipOfBackendCall,endpoints.forceGzipOfBackendCallid,endpoints.forwardedHeaders,endpoints.gzipPassthroughSupportEnabled,endpoints.headersToExcludeFromIncomingCall,endpoints.highSecurity,endpoints.hostPassthroughIncludedInBackendCallHeader,endpoints.inboundSslRequired,endpoints.jsonpCallbackParameter,endpoints.jsonpCallbackParameterValue,endpoints.methods,endpoints.methods.name,endpoints.methods.responseFilters,endpoints.methods.responseFilters.created,endpoints.methods.responseFilters.id,endpoints.methods.responseFilters.jsonFilterFields,endpoints.methods.responseFilters.name,endpoints.methods.responseFilters.notes,endpoints.methods.responseFilters.updated,endpoints.methods.responseFilters.xmlFilterFields,endpoints.methods.sampleJsonResponse,endpoints.methods.sampleXmlResponse,endpoints.name,endpoints.numberOfHttpRedirectsToFollow,endpoints.oauthGrantTypes,endpoints.outboundRequestTargetPath,endpoints.outboundRequestTargetQueryParameters,endpoints.outboundTransportProtocol,endpoints.processor,endpoints.publicDomains,endpoints.requestAuthenticationType,endpoints.requestPathAlias,endpoints.requestProtocol,endpoints.returnedHeaders,endpoints.scheduledMaintenanceEvent,endpoints.scheduledMaintenanceEvent.endDateTime,endpoints.scheduledMaintenanceEvent.endpoints,endpoints.scheduledMaintenanceEvent.id,endpoints.scheduledMaintenanceEvent.name,endpoints.scheduledMaintenanceEvent.startDateTime,endpoints.stringsToTrimFromApiKey,endpoints.supportedHttpMethods,endpoints.systemDomainAuthentication,endpoints.systemDomainAuthentication.certificate,endpoints.systemDomainAuthentication.password,endpoints.systemDomainAuthentication.type,endpoints.systemDomainAuthentication.username,endpoints.systemDomains,endpoints.trafficManagerDomain,endpoints.useSystemDomainCredentials,errorSets,errorSets.errorMessages,errorSets.jsonp,errorSets.jsonpType,errorSets.name,errorSets.type,id,name,qpsLimitOverall,revisionNumber,rfc3986Encode,robotsPolicy,roles,roles.action,roles.created,roles.id,roles.name,roles.updates,securityProfile,updated,version",
			"type": "string"
		},
		{
			"id": "03f29bfc-603f-4fa1-9ddb-2e0e60b10e30",
			"key": "service roles fields",
			"value": "id,name,action,created,updated,description",
			"type": "string"
		},
		{
			"id": "1f0630da-d9e7-4e4a-871a-c8e0ef958fb9",
			"key": "system domain authentication fields",
			"value": "type,username,certificate,password",
			"type": "string"
		},
		{
			"id": "bfcc3d0e-15cb-4c2b-ab31-9f42b6081561",
			"key": "system hostnames fields",
			"value": "address",
			"type": "string"
		}
	]
}